
testinoadc_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005154  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ec  080053ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f4  080053f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  0800546c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800546c  00020310  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014514  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ce  00000000  00000000  000345ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  000380f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6a5  00000000  00000000  00039278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001126a  00000000  00000000  0005691d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9a82  00000000  00000000  00067b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f0  00000000  00000000  0012165c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800527c 	.word	0x0800527c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800527c 	.word	0x0800527c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b96c 	b.w	8000520 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8082 	bne.w	8000376 <__udivmoddi4+0x116>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d946      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa05 f302 	lsl.w	r3, r5, r2
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	4097      	lsls	r7, r2
 800028c:	ea41 0e03 	orr.w	lr, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbbe fcf8 	udiv	ip, lr, r8
 800029c:	b2b9      	uxth	r1, r7
 800029e:	fb08 ee1c 	mls	lr, r8, ip, lr
 80002a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002a6:	fb0c f001 	mul.w	r0, ip, r1
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80002b4:	f080 8116 	bcs.w	80004e4 <__udivmoddi4+0x284>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f240 8113 	bls.w	80004e4 <__udivmoddi4+0x284>
 80002be:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c2:	443b      	add	r3, r7
 80002c4:	1a1b      	subs	r3, r3, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f101 	mul.w	r1, r0, r1
 80002d8:	42a1      	cmp	r1, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002dc:	193c      	adds	r4, r7, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e2:	f080 8101 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002e6:	42a1      	cmp	r1, r4
 80002e8:	f240 80fe 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002ec:	3802      	subs	r0, #2
 80002ee:	443c      	add	r4, r7
 80002f0:	1a64      	subs	r4, r4, r1
 80002f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40d4      	lsrs	r4, r2
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d14f      	bne.n	80003b2 <__udivmoddi4+0x152>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80e7 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 8000342:	4684      	mov	ip, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d7 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7c0      	b.n	80002f8 <__udivmoddi4+0x98>
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80af 	beq.w	80004de <__udivmoddi4+0x27e>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d14b      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0x13e>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80b7 	bhi.w	800050c <__udivmoddi4+0x2ac>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0303 	sbc.w	r3, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	469e      	mov	lr, r3
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0aa      	beq.n	8000302 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b0:	e7a7      	b.n	8000302 <__udivmoddi4+0xa2>
 80003b2:	f1c2 0c20 	rsb	ip, r2, #32
 80003b6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ba:	4097      	lsls	r7, r2
 80003bc:	fa20 f00c 	lsr.w	r0, r0, ip
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003c8:	4318      	orrs	r0, r3
 80003ca:	fbbc f1fe 	udiv	r1, ip, lr
 80003ce:	0c05      	lsrs	r5, r0, #16
 80003d0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003dc:	fb01 f308 	mul.w	r3, r1, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	197d      	adds	r5, r7, r5
 80003ea:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 80003ee:	f080 808b 	bcs.w	8000508 <__udivmoddi4+0x2a8>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8088 	bls.w	8000508 <__udivmoddi4+0x2a8>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	b285      	uxth	r5, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800041a:	d271      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d96f      	bls.n	8000500 <__udivmoddi4+0x2a0>
 8000420:	3802      	subs	r0, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c1 0c20 	rsb	ip, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f70c 	lsr.w	r7, r2, ip
 8000436:	431f      	orrs	r7, r3
 8000438:	fa20 f40c 	lsr.w	r4, r0, ip
 800043c:	fa05 f301 	lsl.w	r3, r5, r1
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa25 f50c 	lsr.w	r5, r5, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 5519 	mls	r5, lr, r9, r5
 8000458:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800045c:	fb09 fa08 	mul.w	sl, r9, r8
 8000460:	45aa      	cmp	sl, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f301 	lsl.w	r3, r0, r1
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x21e>
 800046c:	197d      	adds	r5, r7, r5
 800046e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000472:	d247      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 8000474:	45aa      	cmp	sl, r5
 8000476:	d945      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000478:	f1a9 0902 	sub.w	r9, r9, #2
 800047c:	443d      	add	r5, r7
 800047e:	eba5 050a 	sub.w	r5, r5, sl
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0fe 	udiv	r0, r5, lr
 8000488:	fb0e 5510 	mls	r5, lr, r0, r5
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb00 f808 	mul.w	r8, r0, r8
 8000494:	45a0      	cmp	r8, r4
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800049e:	d22d      	bcs.n	80004fc <__udivmoddi4+0x29c>
 80004a0:	45a0      	cmp	r8, r4
 80004a2:	d92b      	bls.n	80004fc <__udivmoddi4+0x29c>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	fba0 8902 	umull	r8, r9, r0, r2
 80004b4:	454c      	cmp	r4, r9
 80004b6:	46c6      	mov	lr, r8
 80004b8:	464d      	mov	r5, r9
 80004ba:	d319      	bcc.n	80004f0 <__udivmoddi4+0x290>
 80004bc:	d016      	beq.n	80004ec <__udivmoddi4+0x28c>
 80004be:	b15e      	cbz	r6, 80004d8 <__udivmoddi4+0x278>
 80004c0:	ebb3 020e 	subs.w	r2, r3, lr
 80004c4:	eb64 0405 	sbc.w	r4, r4, r5
 80004c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	ea4c 0202 	orr.w	r2, ip, r2
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	e9c6 2400 	strd	r2, r4, [r6]
 80004d8:	2100      	movs	r1, #0
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	4631      	mov	r1, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e70e      	b.n	8000302 <__udivmoddi4+0xa2>
 80004e4:	46ac      	mov	ip, r5
 80004e6:	e6ed      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e701      	b.n	80002f0 <__udivmoddi4+0x90>
 80004ec:	4543      	cmp	r3, r8
 80004ee:	d2e6      	bcs.n	80004be <__udivmoddi4+0x25e>
 80004f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f4:	eb69 0507 	sbc.w	r5, r9, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	e7e0      	b.n	80004be <__udivmoddi4+0x25e>
 80004fc:	4628      	mov	r0, r5
 80004fe:	e7d3      	b.n	80004a8 <__udivmoddi4+0x248>
 8000500:	4660      	mov	r0, ip
 8000502:	e78f      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000504:	4681      	mov	r9, r0
 8000506:	e7ba      	b.n	800047e <__udivmoddi4+0x21e>
 8000508:	4661      	mov	r1, ip
 800050a:	e777      	b.n	80003fc <__udivmoddi4+0x19c>
 800050c:	4608      	mov	r0, r1
 800050e:	e74b      	b.n	80003a8 <__udivmoddi4+0x148>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443d      	add	r5, r7
 8000516:	e715      	b.n	8000344 <__udivmoddi4+0xe4>
 8000518:	3802      	subs	r0, #2
 800051a:	443c      	add	r4, r7
 800051c:	e726      	b.n	800036c <__udivmoddi4+0x10c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800053e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4013      	ands	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000554:	68fb      	ldr	r3, [r7, #12]
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4313      	orrs	r3, r2
 8000576:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000584:	68fb      	ldr	r3, [r7, #12]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <debugPrintln>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800059a:	6838      	ldr	r0, [r7, #0]
 800059c:	f7ff fdf0 	bl	8000180 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	230a      	movs	r3, #10
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 fc5a 	bl	8003e62 <HAL_UART_Transmit>
  char newline[2] = "\r\n";
 80005ae:	f640 230d 	movw	r3, #2573	; 0xa0d
 80005b2:	81bb      	strh	r3, [r7, #12]
  HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 80005b4:	f107 010c 	add.w	r1, r7, #12
 80005b8:	230a      	movs	r3, #10
 80005ba:	2202      	movs	r2, #2
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f003 fc50 	bl	8003e62 <HAL_UART_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fbbe 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f8b6 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 fa10 	bl	80009fc <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f000 f9fc 	bl	80009d8 <MX_DMA_Init>
  MX_ADC_Init();
 80005e0:	f000 f912 	bl	8000808 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f9ac 	bl	8000940 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f002 f88f 	bl	800270c <HAL_PWREx_ReleaseCore>
    /* USER CODE BEGIN 3 */



	  /* Run the ADC calibration */
	  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80005ee:	4846      	ldr	r0, [pc, #280]	; (8000708 <main+0x13c>)
 80005f0:	f001 faba 	bl	8001b68 <HAL_ADCEx_Calibration_Start>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x32>
	  {
	    /* Calibration Error */
	    Error_Handler();
 80005fa:	f000 fa17 	bl	8000a2c <Error_Handler>
	  }

	  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResults, 4);
 80005fe:	2204      	movs	r2, #4
 8000600:	4942      	ldr	r1, [pc, #264]	; (800070c <main+0x140>)
 8000602:	4841      	ldr	r0, [pc, #260]	; (8000708 <main+0x13c>)
 8000604:	f000 ff4a 	bl	800149c <HAL_ADC_Start_DMA>

	  while (adcConversionComplete == 0) {
 8000608:	bf00      	nop
 800060a:	4b41      	ldr	r3, [pc, #260]	; (8000710 <main+0x144>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0fb      	beq.n	800060a <main+0x3e>

	  }
	  adcConversionComplete = 0;
 8000612:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <main+0x144>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]

	  mVolt1 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, adcResults[0], LL_ADC_RESOLUTION_12B);
 8000618:	4b3c      	ldr	r3, [pc, #240]	; (800070c <main+0x140>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000624:	fb03 f202 	mul.w	r2, r3, r2
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <main+0x148>)
 800062a:	fba3 1302 	umull	r1, r3, r3, r2
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	0852      	lsrs	r2, r2, #1
 8000632:	4413      	add	r3, r2
 8000634:	0adb      	lsrs	r3, r3, #11
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <main+0x14c>)
 800063a:	801a      	strh	r2, [r3, #0]
	  snprintf(buffer, 100, "El voltaje 1 es %d\n", mVolt1);
 800063c:	4b36      	ldr	r3, [pc, #216]	; (8000718 <main+0x14c>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4a36      	ldr	r2, [pc, #216]	; (800071c <main+0x150>)
 8000644:	2164      	movs	r1, #100	; 0x64
 8000646:	4836      	ldr	r0, [pc, #216]	; (8000720 <main+0x154>)
 8000648:	f004 f9d8 	bl	80049fc <sniprintf>
	  debugPrintln(&huart2, buffer);
 800064c:	4934      	ldr	r1, [pc, #208]	; (8000720 <main+0x154>)
 800064e:	4835      	ldr	r0, [pc, #212]	; (8000724 <main+0x158>)
 8000650:	f7ff ff9e 	bl	8000590 <debugPrintln>

	  mVolt2 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, adcResults[1], LL_ADC_RESOLUTION_12B);
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <main+0x140>)
 8000656:	885b      	ldrh	r3, [r3, #2]
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000660:	fb03 f202 	mul.w	r2, r3, r2
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <main+0x148>)
 8000666:	fba3 1302 	umull	r1, r3, r3, r2
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	0852      	lsrs	r2, r2, #1
 800066e:	4413      	add	r3, r2
 8000670:	0adb      	lsrs	r3, r3, #11
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <main+0x15c>)
 8000676:	801a      	strh	r2, [r3, #0]
	  snprintf(buffer, 100, "El voltaje 2 es %d\n", mVolt2);
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <main+0x15c>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	4a2b      	ldr	r2, [pc, #172]	; (800072c <main+0x160>)
 8000680:	2164      	movs	r1, #100	; 0x64
 8000682:	4827      	ldr	r0, [pc, #156]	; (8000720 <main+0x154>)
 8000684:	f004 f9ba 	bl	80049fc <sniprintf>
	  debugPrintln(&huart2, buffer);
 8000688:	4925      	ldr	r1, [pc, #148]	; (8000720 <main+0x154>)
 800068a:	4826      	ldr	r0, [pc, #152]	; (8000724 <main+0x158>)
 800068c:	f7ff ff80 	bl	8000590 <debugPrintln>

	  temperature = __LL_ADC_CALC_TEMPERATURE(VDDA_APPLI, adcResults[2], LL_ADC_RESOLUTION_12B);
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <main+0x164>)
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <main+0x168>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d020      	beq.n	80006de <main+0x112>
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <main+0x140>)
 800069e:	889b      	ldrh	r3, [r3, #4]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80006a8:	fb03 f302 	mul.w	r3, r3, r2
 80006ac:	089b      	lsrs	r3, r3, #2
 80006ae:	4a22      	ldr	r2, [pc, #136]	; (8000738 <main+0x16c>)
 80006b0:	fba2 2303 	umull	r2, r3, r2, r3
 80006b4:	095b      	lsrs	r3, r3, #5
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <main+0x168>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2264      	movs	r2, #100	; 0x64
 80006c0:	fb02 f203 	mul.w	r2, r2, r3
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <main+0x164>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <main+0x168>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	1acb      	subs	r3, r1, r3
 80006d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	331e      	adds	r3, #30
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b21b      	sxth	r3, r3
 80006dc:	e001      	b.n	80006e2 <main+0x116>
 80006de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <main+0x170>)
 80006e4:	8013      	strh	r3, [r2, #0]
	  snprintf(buffer, 100, "La temperatura es %d\n", temperature);
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <main+0x170>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <main+0x174>)
 80006ee:	2164      	movs	r1, #100	; 0x64
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <main+0x154>)
 80006f2:	f004 f983 	bl	80049fc <sniprintf>
	  debugPrintln(&huart2, buffer);
 80006f6:	490a      	ldr	r1, [pc, #40]	; (8000720 <main+0x154>)
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <main+0x158>)
 80006fa:	f7ff ff49 	bl	8000590 <debugPrintln>



	  HAL_Delay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000702:	f000 fb9b 	bl	8000e3c <HAL_Delay>
	  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000706:	e772      	b.n	80005ee <main+0x22>
 8000708:	20000298 	.word	0x20000298
 800070c:	200000a4 	.word	0x200000a4
 8000710:	20000094 	.word	0x20000094
 8000714:	00100101 	.word	0x00100101
 8000718:	2000008c 	.word	0x2000008c
 800071c:	08005294 	.word	0x08005294
 8000720:	200000ac 	.word	0x200000ac
 8000724:	200001a8 	.word	0x200001a8
 8000728:	2000008e 	.word	0x2000008e
 800072c:	080052a8 	.word	0x080052a8
 8000730:	1fff75c8 	.word	0x1fff75c8
 8000734:	1fff75a8 	.word	0x1fff75a8
 8000738:	09ee009f 	.word	0x09ee009f
 800073c:	20000090 	.word	0x20000090
 8000740:	080052bc 	.word	0x080052bc

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09a      	sub	sp, #104	; 0x68
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2248      	movs	r2, #72	; 0x48
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f004 f94a 	bl	80049ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <SystemClock_Config+0xc0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000772:	4a24      	ldr	r2, [pc, #144]	; (8000804 <SystemClock_Config+0xc0>)
 8000774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xc0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000786:	2320      	movs	r3, #32
 8000788:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800078e:	2300      	movs	r3, #0
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000792:	2360      	movs	r3, #96	; 0x60
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800079a:	2301      	movs	r3, #1
 800079c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007a2:	2318      	movs	r3, #24
 80007a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fa67 	bl	8002c90 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007c8:	f000 f930 	bl	8000a2c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80007cc:	236f      	movs	r3, #111	; 0x6f
 80007ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2303      	movs	r3, #3
 80007d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2102      	movs	r1, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fde9 	bl	80033c4 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007f8:	f000 f918 	bl	8000a2c <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3768      	adds	r7, #104	; 0x68
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58000400 	.word	0x58000400

08000808 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000818:	4b43      	ldr	r3, [pc, #268]	; (8000928 <MX_ADC_Init+0x120>)
 800081a:	4a44      	ldr	r2, [pc, #272]	; (800092c <MX_ADC_Init+0x124>)
 800081c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800081e:	4b42      	ldr	r3, [pc, #264]	; (8000928 <MX_ADC_Init+0x120>)
 8000820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000824:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <MX_ADC_Init+0x120>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b3e      	ldr	r3, [pc, #248]	; (8000928 <MX_ADC_Init+0x120>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000832:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <MX_ADC_Init+0x120>)
 8000834:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000838:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083a:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <MX_ADC_Init+0x120>)
 800083c:	2204      	movs	r2, #4
 800083e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <MX_ADC_Init+0x120>)
 8000842:	2200      	movs	r2, #0
 8000844:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <MX_ADC_Init+0x120>)
 8000848:	2200      	movs	r2, #0
 800084a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800084c:	4b36      	ldr	r3, [pc, #216]	; (8000928 <MX_ADC_Init+0x120>)
 800084e:	2200      	movs	r2, #0
 8000850:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 4;
 8000852:	4b35      	ldr	r3, [pc, #212]	; (8000928 <MX_ADC_Init+0x120>)
 8000854:	2204      	movs	r2, #4
 8000856:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b33      	ldr	r3, [pc, #204]	; (8000928 <MX_ADC_Init+0x120>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_ADC_Init+0x120>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000866:	4b30      	ldr	r3, [pc, #192]	; (8000928 <MX_ADC_Init+0x120>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_ADC_Init+0x120>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_ADC_Init+0x120>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_ADC_Init+0x120>)
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_ADC_Init+0x120>)
 8000882:	2207      	movs	r2, #7
 8000884:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_ADC_Init+0x120>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_ADC_Init+0x120>)
 8000890:	2200      	movs	r2, #0
 8000892:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000894:	4824      	ldr	r0, [pc, #144]	; (8000928 <MX_ADC_Init+0x120>)
 8000896:	f000 fc3b 	bl	8001110 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC_Init+0x9c>
  {
    Error_Handler();
 80008a0:	f000 f8c4 	bl	8000a2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a4:	2301      	movs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	481c      	ldr	r0, [pc, #112]	; (8000928 <MX_ADC_Init+0x120>)
 80008b6:	f000 fe89 	bl	80015cc <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 80008c0:	f000 f8b4 	bl	8000a2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC_Init+0x128>)
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008c8:	2304      	movs	r3, #4
 80008ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <MX_ADC_Init+0x120>)
 80008d2:	f000 fe7b 	bl	80015cc <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80008dc:	f000 f8a6 	bl	8000a2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ADC_Init+0x12c>)
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008e4:	2308      	movs	r3, #8
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_ADC_Init+0x130>)
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_ADC_Init+0x120>)
 80008f2:	f000 fe6b 	bl	80015cc <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC_Init+0xf8>
  {
    Error_Handler();
 80008fc:	f000 f896 	bl	8000a2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_ADC_Init+0x134>)
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000904:	230c      	movs	r3, #12
 8000906:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_ADC_Init+0x120>)
 8000912:	f000 fe5b 	bl	80015cc <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC_Init+0x118>
  {
    Error_Handler();
 800091c:	f000 f886 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000298 	.word	0x20000298
 800092c:	40012400 	.word	0x40012400
 8000930:	04000002 	.word	0x04000002
 8000934:	b0001000 	.word	0xb0001000
 8000938:	03ffff04 	.word	0x03ffff04
 800093c:	b4002000 	.word	0xb4002000

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 800098a:	f003 fa1a 	bl	8003dc2 <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f84a 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 800099c:	f003 ff34 	bl	8004808 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f841 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 80009ae:	f003 ff69 	bl	8004884 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f838 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_USART2_UART_Init+0x90>)
 80009be:	f003 feeb 	bl	8004798 <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f830 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001a8 	.word	0x200001a8
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009dc:	2004      	movs	r0, #4
 80009de:	f7ff fda7 	bl	8000530 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fda4 	bl	8000530 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	200b      	movs	r0, #11
 80009ee:	f001 fa0c 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f2:	200b      	movs	r0, #11
 80009f4:	f001 fa23 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff fdad 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fdaa 	bl	8000560 <LL_AHB2_GRP1_EnableClock>

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_ADC_ConvCpltCallback+0x18>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000094 	.word	0x20000094

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>

08000a36 <LL_AHB2_GRP1_EnableClock>:
{
 8000a36:	b480      	push	{r7}
 8000a38:	b085      	sub	sp, #20
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4013      	ands	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4013      	ands	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <HAL_ADC_MspInit+0xbc>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d147      	bne.n	8000b86 <HAL_ADC_MspInit+0xb2>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000af6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000afa:	f7ff ffcc 	bl	8000a96 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff ff99 	bl	8000a36 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8000b04:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	481e      	ldr	r0, [pc, #120]	; (8000b94 <HAL_ADC_MspInit+0xc0>)
 8000b1a:	f001 fc6f 	bl	80023fc <HAL_GPIO_Init>

    /* ADC DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b20:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_ADC_MspInit+0xc8>)
 8000b22:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b26:	2205      	movs	r2, #5
 8000b28:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b58:	480f      	ldr	r0, [pc, #60]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b5a:	f001 f98b 	bl	8001e74 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8000b64:	f7ff ff62 	bl	8000a2c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b68:	2110      	movs	r1, #16
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b6c:	f001 fb6e 	bl	800224c <HAL_DMA_ConfigChannelAttributes>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_ADC_MspInit+0xa6>
    {
      Error_Handler();
 8000b76:	f7ff ff59 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b7e:	651a      	str	r2, [r3, #80]	; 0x50
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <HAL_ADC_MspInit+0xc4>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40012400 	.word	0x40012400
 8000b94:	48000400 	.word	0x48000400
 8000b98:	20000238 	.word	0x20000238
 8000b9c:	40020008 	.word	0x40020008

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b096      	sub	sp, #88	; 0x58
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2238      	movs	r2, #56	; 0x38
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 ff13 	bl	80049ec <memset>
  if(huart->Instance==USART2)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d126      	bne.n	8000c1e <HAL_UART_MspInit+0x7e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000bd8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 ffb4 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bea:	f7ff ff1f 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bf2:	f7ff ff38 	bl	8000a66 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ff1d 	bl	8000a36 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f001 fbef 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3758      	adds	r7, #88	; 0x58
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004400 	.word	0x40004400

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f000 f8c7 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA1_Channel1_IRQHandler+0x10>)
 8000c82:	f001 fa1d 	bl	80020c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000238 	.word	0x20000238

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f003 fe6a 	bl	8004998 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20008000 	.word	0x20008000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000098 	.word	0x20000098
 8000cf8:	20000310 	.word	0x20000310

08000cfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d00:	f7ff fc10 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d2a:	f003 fe3b 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2e:	f7ff fc4d 	bl	80005cc <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   r0, =_estack
 8000d34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	080053fc 	.word	0x080053fc
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	20000310 	.word	0x20000310

08000d4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f001 f84a 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000d60:	f002 fd12 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <HAL_Init+0x3c>)
 8000d68:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f000 f810 	bl	8000d90 <HAL_InitTick>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	e001      	b.n	8000d80 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d7c:	f7ff fea3 	bl	8000ac6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d80:	79fb      	ldrb	r3, [r7, #7]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_InitTick+0x6c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d024      	beq.n	8000dee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da4:	f002 fcf0 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x6c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 f84c 	bl	8001e5a <HAL_SYSTICK_Config>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10f      	bne.n	8000de8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b0f      	cmp	r3, #15
 8000dcc:	d809      	bhi.n	8000de2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd6:	f001 f818 	bl	8001e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <HAL_InitTick+0x70>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e004      	b.n	8000df2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e001      	b.n	8000df2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <HAL_IncTick+0x20>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000008 	.word	0x20000008
 8000e24:	200002fc 	.word	0x200002fc

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	200002fc 	.word	0x200002fc

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2107      	movs	r1, #7
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	210f      	movs	r1, #15
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	401a      	ands	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0e9b      	lsrs	r3, r3, #26
 8000f46:	f003 010f 	and.w	r1, r3, #15
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	431a      	orrs	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	0219      	lsls	r1, r3, #8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	400b      	ands	r3, r1
 8000fce:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8000fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ff6:	f023 0317 	bic.w	r3, r3, #23
 8000ffa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001020:	d101      	bne.n	8001026 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001042:	f023 0317 	bic.w	r3, r3, #23
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001068:	f023 0317 	bic.w	r3, r3, #23
 800106c:	f043 0202 	orr.w	r2, r3, #2
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <LL_ADC_IsEnabled+0x18>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <LL_ADC_IsEnabled+0x1a>
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d101      	bne.n	80010ba <LL_ADC_IsDisableOngoing+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_ADC_IsDisableOngoing+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010d6:	f023 0317 	bic.w	r3, r3, #23
 80010da:	f043 0204 	orr.w	r2, r3, #4
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d101      	bne.n	8001104 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e1ae      	b.n	8001490 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fcc7 	bl	8000ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff57 	bl	800100c <LL_ADC_IsInternalRegulatorEnabled>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d115      	bne.n	8001190 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff3c 	bl	8000fe6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800116e:	4b9b      	ldr	r3, [pc, #620]	; (80013dc <HAL_ADC_Init+0x2cc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	099b      	lsrs	r3, r3, #6
 8001174:	4a9a      	ldr	r2, [pc, #616]	; (80013e0 <HAL_ADC_Init+0x2d0>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	099b      	lsrs	r3, r3, #6
 800117c:	3301      	adds	r3, #1
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001182:	e002      	b.n	800118a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3b01      	subs	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f9      	bne.n	8001184 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff39 	bl	800100c <LL_ADC_IsInternalRegulatorEnabled>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10d      	bne.n	80011bc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	f043 0210 	orr.w	r2, r3, #16
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff93 	bl	80010ec <LL_ADC_REG_IsConversionOngoing>
 80011c6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f040 8154 	bne.w	800147e <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 8150 	bne.w	800147e <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011e6:	f043 0202 	orr.w	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff43 	bl	800107e <LL_ADC_IsEnabled>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d14f      	bne.n	800129e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f023 0118 	bic.w	r1, r3, #24
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001220:	4313      	orrs	r3, r2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800122e:	2b01      	cmp	r3, #1
 8001230:	d111      	bne.n	8001256 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800123e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001244:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800124a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4313      	orrs	r3, r2
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_ADC_Init+0x2d4>)
 800125e:	4013      	ands	r3, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	6979      	ldr	r1, [r7, #20]
 8001266:	430b      	orrs	r3, r1
 8001268:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001272:	d014      	beq.n	800129e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800127c:	d00f      	beq.n	800129e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001286:	d00a      	beq.n	800129e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_ADC_Init+0x2d8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001298:	4953      	ldr	r1, [pc, #332]	; (80013e8 <HAL_ADC_Init+0x2d8>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7e1b      	ldrb	r3, [r3, #24]
 80012a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e5b      	ldrb	r3, [r3, #25]
 80012a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e9b      	ldrb	r3, [r3, #26]
 80012b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012b2:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_ADC_Init+0x1b2>
 80012bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c0:	e000      	b.n	80012c4 <HAL_ADC_Init+0x1b4>
 80012c2:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012ca:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da04      	bge.n	80012de <HAL_ADC_Init+0x1ce>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012dc:	e001      	b.n	80012e2 <HAL_ADC_Init+0x1d2>
 80012de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80012e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012ea:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d114      	bne.n	8001328 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e9b      	ldrb	r3, [r3, #26]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d104      	bne.n	8001310 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	e00b      	b.n	8001328 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	2b00      	cmp	r3, #0
 800132e:	d009      	beq.n	8001344 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800133c:	4313      	orrs	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800134e:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	430b      	orrs	r3, r1
 800135a:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_ADC_Init+0x2dc>)
 8001364:	4013      	ands	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	6979      	ldr	r1, [r7, #20]
 800136c:	430b      	orrs	r3, r1
 800136e:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	461a      	mov	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	f7ff fda1 	bl	8000ec2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001388:	461a      	mov	r2, r3
 800138a:	4919      	ldr	r1, [pc, #100]	; (80013f0 <HAL_ADC_Init+0x2e0>)
 800138c:	f7ff fd99 	bl	8000ec2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d108      	bne.n	80013aa <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f062 020f 	orn	r2, r2, #15
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
 80013a8:	e044      	b.n	8001434 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013b2:	d13f      	bne.n	8001434 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	e00c      	b.n	80013d4 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d012      	beq.n	80013f4 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	d9ef      	bls.n	80013ba <HAL_ADC_Init+0x2aa>
 80013da:	e00c      	b.n	80013f6 <HAL_ADC_Init+0x2e6>
 80013dc:	20000000 	.word	0x20000000
 80013e0:	053e2d63 	.word	0x053e2d63
 80013e4:	1ffffc02 	.word	0x1ffffc02
 80013e8:	40012708 	.word	0x40012708
 80013ec:	dffffc02 	.word	0xdffffc02
 80013f0:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80013f4:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f062 020f 	orn	r2, r2, #15
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
 800140c:	e012      	b.n	8001434 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	3b01      	subs	r3, #1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	f003 031c 	and.w	r3, r3, #28
 8001420:	f06f 020f 	mvn.w	r2, #15
 8001424:	fa02 f103 	lsl.w	r1, r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_ADC_Init+0x388>)
 800143c:	4013      	ands	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	429a      	cmp	r2, r3
 8001442:	d10b      	bne.n	800145c <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	f043 0201 	orr.w	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800145a:	e018      	b.n	800148e <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	f023 0312 	bic.w	r3, r3, #18
 8001464:	f043 0210 	orr.w	r2, r3, #16
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800147c:	e007      	b.n	800148e <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	f043 0210 	orr.w	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800148e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	833fffe7 	.word	0x833fffe7

0800149c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe1d 	bl	80010ec <LL_ADC_REG_IsConversionOngoing>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d169      	bne.n	800158c <HAL_ADC_Start_DMA+0xf0>
  {
    __HAL_LOCK(hadc);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Start_DMA+0x2a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e065      	b.n	8001592 <HAL_ADC_Start_DMA+0xf6>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d114      	bne.n	8001506 <HAL_ADC_Start_DMA+0x6a>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fdcc 	bl	800107e <LL_ADC_IsEnabled>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HAL_ADC_Start_DMA+0x5a>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fdb1 	bl	8001058 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f998 	bl	800183c <ADC_Enable>
 800150c:	4603      	mov	r3, r0
 800150e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d13c      	bne.n	8001590 <HAL_ADC_Start_DMA+0xf4>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_ADC_Start_DMA+0x100>)
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_ADC_Start_DMA+0x104>)
 800153e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_ADC_Start_DMA+0x108>)
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	221c      	movs	r2, #28
 800154e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0210 	orr.w	r2, r2, #16
 8001566:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3340      	adds	r3, #64	; 0x40
 8001572:	4619      	mov	r1, r3
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f000 fd24 	bl	8001fc4 <HAL_DMA_Start_IT>
 800157c:	4603      	mov	r3, r0
 800157e:	75fb      	strb	r3, [r7, #23]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fd9e 	bl	80010c6 <LL_ADC_REG_StartConversion>
 800158a:	e001      	b.n	8001590 <HAL_ADC_Start_DMA+0xf4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800158c:	2302      	movs	r3, #2
 800158e:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8001590:	7dfb      	ldrb	r3, [r7, #23]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	08001a07 	.word	0x08001a07
 80015a0:	08001acf 	.word	0x08001acf
 80015a4:	08001aeb 	.word	0x08001aeb

080015a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x28>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e110      	b.n	8001816 <HAL_ADC_ConfigChannel+0x24a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd73 	bl	80010ec <LL_ADC_REG_IsConversionOngoing>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 80f7 	bne.w	80017fc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	f000 80b1 	beq.w	800177a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001620:	d004      	beq.n	800162c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001626:	4a7e      	ldr	r2, [pc, #504]	; (8001820 <HAL_ADC_ConfigChannel+0x254>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d108      	bne.n	800163e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7ff fc94 	bl	8000f64 <LL_ADC_REG_SetSequencerChAdd>
 800163c:	e041      	b.n	80016c2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	210f      	movs	r1, #15
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <HAL_ADC_ConfigChannel+0xa0>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0e9b      	lsrs	r3, r3, #26
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	e011      	b.n	8001690 <HAL_ADC_ConfigChannel+0xc4>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8001684:	2320      	movs	r3, #32
 8001686:	e003      	b.n	8001690 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	6839      	ldr	r1, [r7, #0]
 8001692:	6849      	ldr	r1, [r1, #4]
 8001694:	f001 011f 	and.w	r1, r1, #31
 8001698:	408b      	lsls	r3, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d808      	bhi.n	80016c2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	f7ff fc30 	bl	8000f22 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f7ff fc6d 	bl	8000fae <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f280 8097 	bge.w	800180c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016de:	4851      	ldr	r0, [pc, #324]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80016e0:	f7ff fbe2 	bl	8000ea8 <LL_ADC_GetCommonPathInternalCh>
 80016e4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <HAL_ADC_ConfigChannel+0x25c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d120      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d11b      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001700:	4619      	mov	r1, r3
 8001702:	4848      	ldr	r0, [pc, #288]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 8001704:	f7ff fbbe 	bl	8000e84 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_ADC_ConfigChannel+0x260>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_ADC_ConfigChannel+0x264>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001722:	e002      	b.n	800172a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3b01      	subs	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f9      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001730:	e06c      	b.n	800180c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a3f      	ldr	r2, [pc, #252]	; (8001834 <HAL_ADC_ConfigChannel+0x268>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10c      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x18a>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174c:	4619      	mov	r1, r3
 800174e:	4835      	ldr	r0, [pc, #212]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 8001750:	f7ff fb98 	bl	8000e84 <LL_ADC_SetCommonPathInternalCh>
 8001754:	e05a      	b.n	800180c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a37      	ldr	r2, [pc, #220]	; (8001838 <HAL_ADC_ConfigChannel+0x26c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d155      	bne.n	800180c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	d150      	bne.n	800180c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001770:	4619      	mov	r1, r3
 8001772:	482c      	ldr	r0, [pc, #176]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 8001774:	f7ff fb86 	bl	8000e84 <LL_ADC_SetCommonPathInternalCh>
 8001778:	e048      	b.n	800180c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001782:	d004      	beq.n	800178e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001788:	4a25      	ldr	r2, [pc, #148]	; (8001820 <HAL_ADC_ConfigChannel+0x254>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d107      	bne.n	800179e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	4610      	mov	r0, r2
 800179a:	f7ff fbf5 	bl	8000f88 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da32      	bge.n	800180c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017a6:	481f      	ldr	r0, [pc, #124]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017a8:	f7ff fb7e 	bl	8000ea8 <LL_ADC_GetCommonPathInternalCh>
 80017ac:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_ADC_ConfigChannel+0x25c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d107      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017be:	4619      	mov	r1, r3
 80017c0:	4818      	ldr	r0, [pc, #96]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017c2:	f7ff fb5f 	bl	8000e84 <LL_ADC_SetCommonPathInternalCh>
 80017c6:	e021      	b.n	800180c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_ADC_ConfigChannel+0x268>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d107      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d8:	4619      	mov	r1, r3
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017dc:	f7ff fb52 	bl	8000e84 <LL_ADC_SetCommonPathInternalCh>
 80017e0:	e014      	b.n	800180c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_ADC_ConfigChannel+0x26c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d10f      	bne.n	800180c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017f2:	4619      	mov	r1, r3
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017f6:	f7ff fb45 	bl	8000e84 <LL_ADC_SetCommonPathInternalCh>
 80017fa:	e007      	b.n	800180c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8001814:	7ffb      	ldrb	r3, [r7, #31]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	80000004 	.word	0x80000004
 8001824:	40012708 	.word	0x40012708
 8001828:	b0001000 	.word	0xb0001000
 800182c:	20000000 	.word	0x20000000
 8001830:	053e2d63 	.word	0x053e2d63
 8001834:	b8004000 	.word	0xb8004000
 8001838:	b4002000 	.word	0xb4002000

0800183c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fc16 	bl	800107e <LL_ADC_IsEnabled>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d169      	bne.n	800192c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <ADC_Enable+0xfc>)
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e055      	b.n	800192e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fbd3 	bl	8001032 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800188c:	482b      	ldr	r0, [pc, #172]	; (800193c <ADC_Enable+0x100>)
 800188e:	f7ff fb0b 	bl	8000ea8 <LL_ADC_GetCommonPathInternalCh>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00f      	beq.n	80018bc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <ADC_Enable+0x104>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <ADC_Enable+0x108>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	3301      	adds	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018ae:	e002      	b.n	80018b6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7e5b      	ldrb	r3, [r3, #25]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d033      	beq.n	800192c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fab0 	bl	8000e28 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018ca:	e028      	b.n	800191e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fbd4 	bl	800107e <LL_ADC_IsEnabled>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fba6 	bl	8001032 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7ff fa9f 	bl	8000e28 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d914      	bls.n	800191e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d00d      	beq.n	800191e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e007      	b.n	800192e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d1cf      	bne.n	80018cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	80000017 	.word	0x80000017
 800193c:	40012708 	.word	0x40012708
 8001940:	20000000 	.word	0x20000000
 8001944:	053e2d63 	.word	0x053e2d63

08001948 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fba4 	bl	80010a2 <LL_ADC_IsDisableOngoing>
 800195a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fb8c 	bl	800107e <LL_ADC_IsEnabled>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d047      	beq.n	80019fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d144      	bne.n	80019fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0305 	and.w	r3, r3, #5
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10c      	bne.n	800199a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb67 	bl	8001058 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2203      	movs	r2, #3
 8001990:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001992:	f7ff fa49 	bl	8000e28 <HAL_GetTick>
 8001996:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001998:	e029      	b.n	80019ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f043 0210 	orr.w	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e023      	b.n	80019fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019b6:	f7ff fa37 	bl	8000e28 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d914      	bls.n	80019ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00d      	beq.n	80019ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	f043 0210 	orr.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e007      	b.n	80019fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1dc      	bne.n	80019b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d143      	bne.n	8001aa8 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fa64 	bl	8000efe <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d031      	beq.n	8001aa0 <ADC_DMAConvCplt+0x9a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	7e9b      	ldrb	r3, [r3, #26]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d12d      	bne.n	8001aa0 <ADC_DMAConvCplt+0x9a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d126      	bne.n	8001aa0 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb48 	bl	80010ec <LL_ADC_REG_IsConversionOngoing>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d112      	bne.n	8001a88 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 020c 	bic.w	r2, r2, #12
 8001a70:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	659a      	str	r2, [r3, #88]	; 0x58
 8001a86:	e00b      	b.n	8001aa0 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7fe ffb5 	bl	8000a10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001aa6:	e00e      	b.n	8001ac6 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fd80 	bl	80015ba <HAL_ADC_ErrorCallback>
}
 8001aba:	e004      	b.n	8001ac6 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff fd63 	bl	80015a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b08:	f043 0204 	orr.w	r2, r3, #4
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fd52 	bl	80015ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <LL_ADC_IsEnabled>:
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_IsEnabled+0x18>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_IsEnabled+0x1a>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_IsCalibrationOnGoing>:
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADCEx_Calibration_Start+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e068      	b.n	8001c54 <HAL_ADCEx_Calibration_Start+0xec>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fedc 	bl	8001948 <ADC_Disable>
 8001b90:	4603      	mov	r3, r0
 8001b92:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffc0 	bl	8001b1e <LL_ADC_IsEnabled>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d14c      	bne.n	8001c3e <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0203 	bic.w	r2, r2, #3
 8001bce:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bde:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001be0:	e014      	b.n	8001c0c <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8001bee:	d30d      	bcc.n	8001c0c <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f023 0312 	bic.w	r3, r3, #18
 8001bf8:	f043 0210 	orr.w	r2, r3, #16
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e023      	b.n	8001c54 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff96 	bl	8001b42 <LL_ADC_IsCalibrationOnGoing>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e2      	bne.n	8001be2 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68d9      	ldr	r1, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	f023 0303 	bic.w	r3, r3, #3
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c3c:	e005      	b.n	8001c4a <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <__NVIC_EnableIRQ+0x34>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd4:	f7ff ff90 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff2d 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff44 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff92 	bl	8001d4c <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff61 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff37 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa4 	bl	8001db0 <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08e      	b.n	8001fa4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_DMA_Init+0x138>)
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d80f      	bhi.n	8001eb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <HAL_DMA_Init+0x13c>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a45      	ldr	r2, [pc, #276]	; (8001fb4 <HAL_DMA_Init+0x140>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	009a      	lsls	r2, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <HAL_DMA_Init+0x144>)
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb0:	e00e      	b.n	8001ed0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <HAL_DMA_Init+0x148>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_DMA_Init+0x140>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	009a      	lsls	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_DMA_Init+0x14c>)
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eea:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f9fe 	bl	8002324 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f30:	d102      	bne.n	8001f38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f4e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d010      	beq.n	8001f7a <HAL_DMA_Init+0x106>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d80c      	bhi.n	8001f7a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fa27 	bl	80023b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	e008      	b.n	8001f8c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40020407 	.word	0x40020407
 8001fb0:	bffdfff8 	.word	0xbffdfff8
 8001fb4:	cccccccd 	.word	0xcccccccd
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	bffdfbf8 	.word	0xbffdfbf8
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_DMA_Start_IT+0x20>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e069      	b.n	80020b8 <HAL_DMA_Start_IT+0xf4>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d155      	bne.n	80020a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f944 	bl	80022aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 020e 	orr.w	r2, r2, #14
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e00f      	b.n	800205c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0204 	bic.w	r2, r2, #4
 800204a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 020a 	orr.w	r2, r2, #10
 800205a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002078:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002090:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e008      	b.n	80020b6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f003 031c 	and.w	r3, r3, #28
 80020e0:	2204      	movs	r2, #4
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d027      	beq.n	800213c <HAL_DMA_IRQHandler+0x7c>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d022      	beq.n	800213c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0204 	bic.w	r2, r2, #4
 8002112:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f003 021c 	and.w	r2, r3, #28
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	2104      	movs	r1, #4
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8081 	beq.w	8002234 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800213a:	e07b      	b.n	8002234 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f003 031c 	and.w	r3, r3, #28
 8002144:	2202      	movs	r2, #2
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d03d      	beq.n	80021cc <HAL_DMA_IRQHandler+0x10c>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d038      	beq.n	80021cc <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 020a 	bic.w	r2, r2, #10
 8002176:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_DMA_IRQHandler+0x180>)
 8002188:	429a      	cmp	r2, r3
 800218a:	d909      	bls.n	80021a0 <HAL_DMA_IRQHandler+0xe0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	f003 031c 	and.w	r3, r3, #28
 8002194:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_DMA_IRQHandler+0x184>)
 8002196:	2102      	movs	r1, #2
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	6053      	str	r3, [r2, #4]
 800219e:	e008      	b.n	80021b2 <HAL_DMA_IRQHandler+0xf2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f003 031c 	and.w	r3, r3, #28
 80021a8:	4a27      	ldr	r2, [pc, #156]	; (8002248 <HAL_DMA_IRQHandler+0x188>)
 80021aa:	2102      	movs	r1, #2
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d038      	beq.n	8002234 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80021ca:	e033      	b.n	8002234 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 031c 	and.w	r3, r3, #28
 80021d4:	2208      	movs	r2, #8
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02a      	beq.n	8002236 <HAL_DMA_IRQHandler+0x176>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d025      	beq.n	8002236 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 020e 	bic.w	r2, r2, #14
 80021f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f003 021c 	and.w	r2, r3, #28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002234:	bf00      	nop
 8002236:	bf00      	nop
}
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40020080 	.word	0x40020080
 8002244:	40020400 	.word	0x40020400
 8002248:	40020000 	.word	0x40020000

0800224c <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	72fb      	strb	r3, [r7, #11]
    return status;
 8002264:	7afb      	ldrb	r3, [r7, #11]
 8002266:	e01b      	b.n	80022a0 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e003      	b.n	8002296 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002294:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]

  return status;
 800229e:	7afb      	ldrb	r3, [r7, #11]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022c0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022d2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f003 021c 	and.w	r2, r3, #28
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d108      	bne.n	800230a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002308:	e007      	b.n	800231a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	60da      	str	r2, [r3, #12]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d813      	bhi.n	8002360 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002344:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3b08      	subs	r3, #8
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e011      	b.n	8002384 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800236a:	4413      	add	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	3b08      	subs	r3, #8
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	3307      	adds	r3, #7
 8002382:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2201      	movs	r2, #1
 8002392:	409a      	lsls	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40020407 	.word	0x40020407
 80023a8:	cccccccd 	.word	0xcccccccd
 80023ac:	4002081c 	.word	0x4002081c
 80023b0:	40020880 	.word	0x40020880

080023b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80023d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3b01      	subs	r3, #1
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	1000823f 	.word	0x1000823f
 80023f8:	40020940 	.word	0x40020940

080023fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240a:	e140      	b.n	800268e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8132 	beq.w	8002688 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d005      	beq.n	800243c <HAL_GPIO_Init+0x40>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d130      	bne.n	800249e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002472:	2201      	movs	r2, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0201 	and.w	r2, r3, #1
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d017      	beq.n	80024da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d123      	bne.n	800252e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 808c 	beq.w	8002688 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002570:	4a4e      	ldr	r2, [pc, #312]	; (80026ac <HAL_GPIO_Init+0x2b0>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	2207      	movs	r2, #7
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800259a:	d00d      	beq.n	80025b8 <HAL_GPIO_Init+0x1bc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a44      	ldr	r2, [pc, #272]	; (80026b0 <HAL_GPIO_Init+0x2b4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <HAL_GPIO_Init+0x1b8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <HAL_GPIO_Init+0x2b8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_GPIO_Init+0x1b4>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e004      	b.n	80025ba <HAL_GPIO_Init+0x1be>
 80025b0:	2307      	movs	r3, #7
 80025b2:	e002      	b.n	80025ba <HAL_GPIO_Init+0x1be>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_GPIO_Init+0x1be>
 80025b8:	2300      	movs	r3, #0
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	f002 0203 	and.w	r2, r2, #3
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	4093      	lsls	r3, r2
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ca:	4938      	ldr	r1, [pc, #224]	; (80026ac <HAL_GPIO_Init+0x2b0>)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80025d8:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 80025da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025de:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80025fe:	4a2e      	ldr	r2, [pc, #184]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002606:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 8002608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800262c:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002658:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002682:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_GPIO_Init+0x2bc>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f aeb7 	bne.w	800240c <HAL_GPIO_Init+0x10>
  }
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40010000 	.word	0x40010000
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800
 80026b8:	58000800 	.word	0x58000800

080026bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	58000400 	.word	0x58000400

080026d8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <LL_PWR_EnableBootC2+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <LL_PWR_EnableBootC2+0x18>)
 80026e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	58000400 	.word	0x58000400

080026f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_PWREx_GetVoltageRange+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	58000400 	.word	0x58000400

0800270c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002714:	f7ff ffe0 	bl	80026d8 <LL_PWR_EnableBootC2>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002730:	d101      	bne.n	8002736 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	58000400 	.word	0x58000400

08002744 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278e:	d101      	bne.n	8002794 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e8:	d101      	bne.n	80027ee <LL_RCC_HSE_IsReady+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_RCC_HSE_IsReady+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d101      	bne.n	8002848 <LL_RCC_HSI_IsReady+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_RCC_HSI_IsReady+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d101      	bne.n	8002892 <LL_RCC_LSE_IsReady+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_RCC_LSE_IsReady+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d101      	bne.n	80028f4 <LL_RCC_LSI_IsReady+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_RCC_LSI_IsReady+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6013      	str	r3, [r2, #0]
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d101      	bne.n	800294c <LL_RCC_MSI_IsReady+0x16>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <LL_RCC_MSI_IsReady+0x18>
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b08      	cmp	r3, #8
 8002966:	d101      	bne.n	800296c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a68:	f023 020f 	bic.w	r2, r3, #15
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b76:	d101      	bne.n	8002b7c <LL_RCC_PLL_IsReady+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_RCC_PLL_IsReady+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d101      	bne.n	8002bf8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c16:	d101      	bne.n	8002c1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d101      	bne.n	8002c40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c5c:	d101      	bne.n	8002c62 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c7e:	d101      	bne.n	8002c84 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e38a      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca2:	f7ff fea6 	bl	80029f2 <LL_RCC_GetSysClkSource>
 8002ca6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca8:	f7ff ff8f 	bl	8002bca <LL_RCC_PLL_GetMainSource>
 8002cac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80c9 	beq.w	8002e4e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x3e>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d17b      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d178      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cce:	f7ff fe32 	bl	8002936 <LL_RCC_MSI_IsReady>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x54>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e369      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x72>
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d00:	e006      	b.n	8002d10 <HAL_RCC_OscConfig+0x80>
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d222      	bcs.n	8002d5a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fd6d 	bl	80037f8 <RCC_SetFlashLatencyFromMSIRange>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e347      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fe26 	bl	80029a4 <LL_RCC_MSI_SetCalibTrimming>
 8002d58:	e021      	b.n	8002d9e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fe0d 	bl	80029a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fd32 	bl	80037f8 <RCC_SetFlashLatencyFromMSIRange>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e30c      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d9e:	f000 fcf3 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4ab4      	ldr	r2, [pc, #720]	; (8003078 <HAL_RCC_OscConfig+0x3e8>)
 8002da6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002da8:	4bb4      	ldr	r3, [pc, #720]	; (800307c <HAL_RCC_OscConfig+0x3ec>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ffef 	bl	8000d90 <HAL_InitTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d047      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	e2fb      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dc8:	f7ff fd99 	bl	80028fe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f82c 	bl	8000e28 <HAL_GetTick>
 8002dd0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dd4:	f7fe f828 	bl	8000e28 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e2e8      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002de6:	f7ff fda6 	bl	8002936 <LL_RCC_MSI_IsReady>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f1      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfa:	f043 0308 	orr.w	r3, r3, #8
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fdc2 	bl	80029a4 <LL_RCC_MSI_SetCalibTrimming>
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e22:	f7ff fd7a 	bl	800291a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e26:	f7fd ffff 	bl	8000e28 <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e2e:	f7fd fffb 	bl	8000e28 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e2bb      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e40:	f7ff fd79 	bl	8002936 <LL_RCC_MSI_IsReady>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f1      	bne.n	8002e2e <HAL_RCC_OscConfig+0x19e>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d05f      	beq.n	8002f1a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1dc>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d10d      	bne.n	8002e82 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d10a      	bne.n	8002e82 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	f7ff fcb3 	bl	80027d6 <LL_RCC_HSE_IsReady>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d050      	beq.n	8002f18 <HAL_RCC_OscConfig+0x288>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d14c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e29a      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x218>
 8002ea2:	f7ff fc7c 	bl	800279e <LL_RCC_HSE_Enable>
 8002ea6:	e00d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x234>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002eb0:	d104      	bne.n	8002ebc <HAL_RCC_OscConfig+0x22c>
 8002eb2:	f7ff fc47 	bl	8002744 <LL_RCC_HSE_EnableTcxo>
 8002eb6:	f7ff fc72 	bl	800279e <LL_RCC_HSE_Enable>
 8002eba:	e003      	b.n	8002ec4 <HAL_RCC_OscConfig+0x234>
 8002ebc:	f7ff fc7d 	bl	80027ba <LL_RCC_HSE_Disable>
 8002ec0:	f7ff fc4e 	bl	8002760 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd ffac 	bl	8000e28 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fd ffa8 	bl	8000e28 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e268      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ee6:	f7ff fc76 	bl	80027d6 <LL_RCC_HSE_IsReady>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f1      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x244>
 8002ef0:	e013      	b.n	8002f1a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fd ff99 	bl	8000e28 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efa:	f7fd ff95 	bl	8000e28 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	; 0x64
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e255      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f0c:	f7ff fc63 	bl	80027d6 <LL_RCC_HSE_IsReady>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f1      	bne.n	8002efa <HAL_RCC_OscConfig+0x26a>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d04b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x2a8>
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d113      	bne.n	8002f5a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d110      	bne.n	8002f5a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f38:	f7ff fc7a 	bl	8002830 <LL_RCC_HSI_IsReady>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2be>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e234      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fc7d 	bl	8002852 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	e031      	b.n	8002fbe <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	f7ff fc49 	bl	80027f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fd ff5f 	bl	8000e28 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6e:	f7fd ff5b 	bl	8000e28 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e21b      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f80:	f7ff fc56 	bl	8002830 <LL_RCC_HSI_IsReady>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f1      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fc5f 	bl	8002852 <LL_RCC_HSI_SetCalibTrimming>
 8002f94:	e013      	b.n	8002fbe <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	f7ff fc3d 	bl	8002814 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fd ff45 	bl	8000e28 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fd ff41 	bl	8000e28 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e201      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fb4:	f7ff fc3c 	bl	8002830 <LL_RCC_HSI_IsReady>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f1      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d06e      	beq.n	80030a8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d056      	beq.n	8003080 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d031      	beq.n	800304e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1da      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 800300c:	f7ff fc56 	bl	80028bc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003010:	f7fd ff0a 	bl	8000e28 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003018:	f7fd ff06 	bl	8000e28 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b11      	cmp	r3, #17
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1c6      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800302a:	f7ff fc57 	bl	80028dc <LL_RCC_LSI_IsReady>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f1      	bne.n	8003018 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303c:	f023 0210 	bic.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	f7ff fc25 	bl	800289c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fd fee9 	bl	8000e28 <HAL_GetTick>
 8003056:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305a:	f7fd fee5 	bl	8000e28 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b11      	cmp	r3, #17
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1a5      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 800306c:	f7ff fc36 	bl	80028dc <LL_RCC_LSI_IsReady>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f1      	beq.n	800305a <HAL_RCC_OscConfig+0x3ca>
 8003076:	e017      	b.n	80030a8 <HAL_RCC_OscConfig+0x418>
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003080:	f7ff fc1c 	bl	80028bc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fd fed0 	bl	8000e28 <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7fd fecc 	bl	8000e28 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b11      	cmp	r3, #17
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e18c      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800309e:	f7ff fc1d 	bl	80028dc <LL_RCC_LSI_IsReady>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f1      	bne.n	800308c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80d8 	beq.w	8003266 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030b6:	f7ff fb33 	bl	8002720 <LL_PWR_IsEnabledBkUpAccess>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d113      	bne.n	80030e8 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030c0:	f7ff fafc 	bl	80026bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c4:	f7fd feb0 	bl	8000e28 <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030cc:	f7fd feac 	bl	8000e28 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e16c      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030de:	f7ff fb1f 	bl	8002720 <LL_PWR_IsEnabledBkUpAccess>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f1      	beq.n	80030cc <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d07b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b85      	cmp	r3, #133	; 0x85
 80030f6:	d003      	beq.n	8003100 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d109      	bne.n	8003114 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fd fe88 	bl	8000e28 <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fd fe7a 	bl	8000e28 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e138      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003146:	f7ff fb98 	bl	800287a <LL_RCC_LSE_IsReady>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ef      	beq.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b81      	cmp	r3, #129	; 0x81
 8003156:	d003      	beq.n	8003160 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b85      	cmp	r3, #133	; 0x85
 800315e:	d121      	bne.n	80031a4 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fd fe62 	bl	8000e28 <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fd fe54 	bl	8000e28 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e112      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ec      	beq.n	800317c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031a2:	e060      	b.n	8003266 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fe40 	bl	8000e28 <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fd fe32 	bl	8000e28 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0f0      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ec      	bne.n	80031c0 <HAL_RCC_OscConfig+0x530>
 80031e6:	e03e      	b.n	8003266 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd fe1e 	bl	8000e28 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fd fe10 	bl	8000e28 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0ce      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ec      	bne.n	8003204 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fd fdfd 	bl	8000e28 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fd fdef 	bl	8000e28 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0ad      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 800325c:	f7ff fb0d 	bl	800287a <LL_RCC_LSE_IsReady>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ef      	bne.n	8003246 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a3 	beq.w	80033b6 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d076      	beq.n	8003364 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	2b02      	cmp	r3, #2
 800327c:	d14b      	bne.n	8003316 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	f7ff fc63 	bl	8002b48 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd fdd1 	bl	8000e28 <HAL_GetTick>
 8003286:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fd fdcd 	bl	8000e28 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b0a      	cmp	r3, #10
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e08d      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800329c:	f7ff fc62 	bl	8002b64 <LL_RCC_PLL_IsReady>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f1      	bne.n	800328a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <HAL_RCC_OscConfig+0x730>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032be:	0212      	lsls	r2, r2, #8
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032d2:	430a      	orrs	r2, r1
 80032d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	f7ff fc26 	bl	8002b2c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd fd9a 	bl	8000e28 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fd fd96 	bl	8000e28 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e056      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800330a:	f7ff fc2b 	bl	8002b64 <LL_RCC_PLL_IsReady>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f1      	beq.n	80032f8 <HAL_RCC_OscConfig+0x668>
 8003314:	e04f      	b.n	80033b6 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	f7ff fc17 	bl	8002b48 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003324:	f023 0303 	bic.w	r3, r3, #3
 8003328:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003334:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fd fd73 	bl	8000e28 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003346:	f7fd fd6f 	bl	8000e28 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b0a      	cmp	r3, #10
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e02f      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003358:	f7ff fc04 	bl	8002b64 <LL_RCC_PLL_IsReady>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f1      	bne.n	8003346 <HAL_RCC_OscConfig+0x6b6>
 8003362:	e028      	b.n	80033b6 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e023      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	429a      	cmp	r2, r3
 8003384:	d115      	bne.n	80033b2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	429a      	cmp	r2, r3
 8003392:	d10e      	bne.n	80033b2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	11c1808c 	.word	0x11c1808c

080033c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e12c      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b98      	ldr	r3, [pc, #608]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d91b      	bls.n	800341e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b95      	ldr	r3, [pc, #596]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 0207 	bic.w	r2, r3, #7
 80033ee:	4993      	ldr	r1, [pc, #588]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f6:	f7fd fd17 	bl	8000e28 <HAL_GetTick>
 80033fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033fe:	f7fd fd13 	bl	8000e28 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e110      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003410:	4b8a      	ldr	r3, [pc, #552]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d1ef      	bne.n	80033fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff faea 	bl	8002a08 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003434:	f7fd fcf8 	bl	8000e28 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800343c:	f7fd fcf4 	bl	8000e28 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0f1      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800344e:	f7ff fbc7 	bl	8002be0 <LL_RCC_IsActiveFlag_HPRE>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f1      	beq.n	800343c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d016      	beq.n	8003492 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fae0 	bl	8002a2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800346e:	f7fd fcdb 	bl	8000e28 <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003476:	f7fd fcd7 	bl	8000e28 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0d4      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003488:	f7ff fbbb 	bl	8002c02 <LL_RCC_IsActiveFlag_C2HPRE>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f1      	beq.n	8003476 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fad8 	bl	8002a58 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034a8:	f7fd fcbe 	bl	8000e28 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034b0:	f7fd fcba 	bl	8000e28 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0b7      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034c2:	f7ff fbb0 	bl	8002c26 <LL_RCC_IsActiveFlag_SHDHPRE>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f1      	beq.n	80034b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d016      	beq.n	8003506 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fad1 	bl	8002a84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034e2:	f7fd fca1 	bl	8000e28 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ea:	f7fd fc9d 	bl	8000e28 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e09a      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034fc:	f7ff fba5 	bl	8002c4a <LL_RCC_IsActiveFlag_PPRE1>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f1      	beq.n	80034ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fac6 	bl	8002aaa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800351e:	f7fd fc83 	bl	8000e28 <HAL_GetTick>
 8003522:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003526:	f7fd fc7f 	bl	8000e28 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e07c      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003538:	f7ff fb98 	bl	8002c6c <LL_RCC_IsActiveFlag_PPRE2>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f1      	beq.n	8003526 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d043      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d106      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003556:	f7ff f93e 	bl	80027d6 <LL_RCC_HSE_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d11e      	bne.n	800359e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e066      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d106      	bne.n	800357a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800356c:	f7ff fafa 	bl	8002b64 <LL_RCC_PLL_IsReady>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e05b      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003582:	f7ff f9d8 	bl	8002936 <LL_RCC_MSI_IsReady>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e050      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003590:	f7ff f94e 	bl	8002830 <LL_RCC_HSI_IsReady>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e049      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fa12 	bl	80029cc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a8:	f7fd fc3e 	bl	8000e28 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7fd fc3a 	bl	8000e28 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e035      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	f7ff fa14 	bl	80029f2 <LL_RCC_GetSysClkSource>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d1ec      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d21b      	bcs.n	800361c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 0207 	bic.w	r2, r3, #7
 80035ec:	4913      	ldr	r1, [pc, #76]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f4:	f7fd fc18 	bl	8000e28 <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	e008      	b.n	800360e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035fc:	f7fd fc14 	bl	8000e28 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e011      	b.n	8003632 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_ClockConfig+0x278>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d1ef      	bne.n	80035fc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800361c:	f000 f8b4 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 8003620:	4603      	mov	r3, r0
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_RCC_ClockConfig+0x27c>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <HAL_RCC_ClockConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fbb0 	bl	8000d90 <HAL_InitTick>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	58004000 	.word	0x58004000
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003656:	f7ff f9cc 	bl	80029f2 <LL_RCC_GetSysClkSource>
 800365a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800365c:	f7ff fab5 	bl	8002bca <LL_RCC_PLL_GetMainSource>
 8003660:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x2c>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d139      	bne.n	80036e2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d136      	bne.n	80036e2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003674:	f7ff f96f 	bl	8002956 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d115      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x62>
 800367e:	f7ff f96a 	bl	8002956 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d106      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x4e>
 8003688:	f7ff f975 	bl	8002976 <LL_RCC_MSI_GetRange>
 800368c:	4603      	mov	r3, r0
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	e005      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x5a>
 8003696:	f7ff f979 	bl	800298c <LL_RCC_MSI_GetRangeAfterStandby>
 800369a:	4603      	mov	r3, r0
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	4a36      	ldr	r2, [pc, #216]	; (800377c <HAL_RCC_GetSysClockFreq+0x134>)
 80036a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80036aa:	f7ff f954 	bl	8002956 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x7a>
 80036b4:	f7ff f95f 	bl	8002976 <LL_RCC_MSI_GetRange>
 80036b8:	4603      	mov	r3, r0
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	e005      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x86>
 80036c2:	f7ff f963 	bl	800298c <LL_RCC_MSI_GetRangeAfterStandby>
 80036c6:	4603      	mov	r3, r0
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4a2b      	ldr	r2, [pc, #172]	; (800377c <HAL_RCC_GetSysClockFreq+0x134>)
 80036d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d115      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036e0:	e012      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d102      	bne.n	80036ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCC_GetSysClockFreq+0x138>)
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e00c      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d109      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036f4:	f7ff f842 	bl	800277c <LL_RCC_HSE_IsEnabledDiv2>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCC_GetSysClockFreq+0x138>)
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e001      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003704:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003706:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003708:	f7ff f973 	bl	80029f2 <LL_RCC_GetSysClkSource>
 800370c:	4603      	mov	r3, r0
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d12f      	bne.n	8003772 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003712:	f7ff fa5a 	bl	8002bca <LL_RCC_PLL_GetMainSource>
 8003716:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d003      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0xde>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d003      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0xe4>
 8003724:	e00d      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <HAL_RCC_GetSysClockFreq+0x138>)
 8003728:	60fb      	str	r3, [r7, #12]
        break;
 800372a:	e00d      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800372c:	f7ff f826 	bl	800277c <LL_RCC_HSE_IsEnabledDiv2>
 8003730:	4603      	mov	r3, r0
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_RCC_GetSysClockFreq+0x138>)
 8003738:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800373a:	e005      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_RCC_GetSysClockFreq+0x13c>)
 800373e:	60fb      	str	r3, [r7, #12]
        break;
 8003740:	e002      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	60fb      	str	r3, [r7, #12]
        break;
 8003746:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003748:	f7ff fa1d 	bl	8002b86 <LL_RCC_PLL_GetN>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	fb03 f402 	mul.w	r4, r3, r2
 8003754:	f7ff fa2e 	bl	8002bb4 <LL_RCC_PLL_GetDivider>
 8003758:	4603      	mov	r3, r0
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	3301      	adds	r3, #1
 800375e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003762:	f7ff fa1c 	bl	8002b9e <LL_RCC_PLL_GetR>
 8003766:	4603      	mov	r3, r0
 8003768:	0f5b      	lsrs	r3, r3, #29
 800376a:	3301      	adds	r3, #1
 800376c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003770:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003772:	697b      	ldr	r3, [r7, #20]
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd90      	pop	{r4, r7, pc}
 800377c:	08005350 	.word	0x08005350
 8003780:	00f42400 	.word	0x00f42400
 8003784:	01e84800 	.word	0x01e84800

08003788 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003788:	b598      	push	{r3, r4, r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800378c:	f7ff ff5c 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003790:	4604      	mov	r4, r0
 8003792:	f7ff f99d 	bl	8002ad0 <LL_RCC_GetAHBPrescaler>
 8003796:	4603      	mov	r3, r0
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a03      	ldr	r2, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x24>)
 80037a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd98      	pop	{r3, r4, r7, pc}
 80037ac:	080052f0 	.word	0x080052f0

080037b0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b0:	b598      	push	{r3, r4, r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037b4:	f7ff ffe8 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037b8:	4604      	mov	r4, r0
 80037ba:	f7ff f9a1 	bl	8002b00 <LL_RCC_GetAPB1Prescaler>
 80037be:	4603      	mov	r3, r0
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	4a03      	ldr	r2, [pc, #12]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd98      	pop	{r3, r4, r7, pc}
 80037d0:	08005330 	.word	0x08005330

080037d4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d4:	b598      	push	{r3, r4, r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037d8:	f7ff ffd6 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037dc:	4604      	mov	r4, r0
 80037de:	f7ff f99a 	bl	8002b16 <LL_RCC_GetAPB2Prescaler>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0adb      	lsrs	r3, r3, #11
 80037e6:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd98      	pop	{r3, r4, r7, pc}
 80037f4:	08005330 	.word	0x08005330

080037f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	4a10      	ldr	r2, [pc, #64]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003810:	f7ff f969 	bl	8002ae6 <LL_RCC_GetAHB3Prescaler>
 8003814:	4603      	mov	r3, r0
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4a09      	ldr	r2, [pc, #36]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0c9c      	lsrs	r4, r3, #18
 8003834:	f7fe ff5e 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 8003838:	4603      	mov	r3, r0
 800383a:	4619      	mov	r1, r3
 800383c:	4620      	mov	r0, r4
 800383e:	f000 f80b 	bl	8003858 <RCC_SetFlashLatency>
 8003842:	4603      	mov	r3, r0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	08005350 	.word	0x08005350
 8003850:	080052f0 	.word	0x080052f0
 8003854:	431bde83 	.word	0x431bde83

08003858 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08e      	sub	sp, #56	; 0x38
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003862:	4a3c      	ldr	r2, [pc, #240]	; (8003954 <RCC_SetFlashLatency+0xfc>)
 8003864:	f107 0320 	add.w	r3, r7, #32
 8003868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800386c:	6018      	str	r0, [r3, #0]
 800386e:	3304      	adds	r3, #4
 8003870:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003872:	4a39      	ldr	r2, [pc, #228]	; (8003958 <RCC_SetFlashLatency+0x100>)
 8003874:	f107 0318 	add.w	r3, r7, #24
 8003878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800387c:	6018      	str	r0, [r3, #0]
 800387e:	3304      	adds	r3, #4
 8003880:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003882:	4a36      	ldr	r2, [pc, #216]	; (800395c <RCC_SetFlashLatency+0x104>)
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	ca07      	ldmia	r2, {r0, r1, r2}
 800388a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800388e:	2300      	movs	r3, #0
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003898:	d11d      	bne.n	80038d6 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800389a:	2300      	movs	r3, #0
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
 800389e:	e016      	b.n	80038ce <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038a8:	4413      	add	r3, r2
 80038aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d808      	bhi.n	80038c8 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038be:	4413      	add	r3, r2
 80038c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038c6:	e023      	b.n	8003910 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	3301      	adds	r3, #1
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d9e5      	bls.n	80038a0 <RCC_SetFlashLatency+0x48>
 80038d4:	e01c      	b.n	8003910 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038da:	e016      	b.n	800390a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038e4:	4413      	add	r3, r2
 80038e6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d808      	bhi.n	8003904 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038fa:	4413      	add	r3, r2
 80038fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003902:	e005      	b.n	8003910 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	3301      	adds	r3, #1
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	2b02      	cmp	r3, #2
 800390e:	d9e5      	bls.n	80038dc <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <RCC_SetFlashLatency+0x108>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 0207 	bic.w	r2, r3, #7
 8003918:	4911      	ldr	r1, [pc, #68]	; (8003960 <RCC_SetFlashLatency+0x108>)
 800391a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003920:	f7fd fa82 	bl	8000e28 <HAL_GetTick>
 8003924:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003926:	e008      	b.n	800393a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003928:	f7fd fa7e 	bl	8000e28 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e007      	b.n	800394a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <RCC_SetFlashLatency+0x108>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003944:	429a      	cmp	r2, r3
 8003946:	d1ef      	bne.n	8003928 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3738      	adds	r7, #56	; 0x38
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	080052d4 	.word	0x080052d4
 8003958:	080052dc 	.word	0x080052dc
 800395c:	080052e4 	.word	0x080052e4
 8003960:	58004000 	.word	0x58004000

08003964 <LL_RCC_LSE_IsReady>:
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d101      	bne.n	800397c <LL_RCC_LSE_IsReady+0x18>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <LL_RCC_LSE_IsReady+0x1a>
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <LL_RCC_SetUSARTClockSource>:
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	43db      	mvns	r3, r3
 800399c:	401a      	ands	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_SetI2SClockSource>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <LL_RCC_SetLPUARTClockSource>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <LL_RCC_SetI2CClockSource>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a22:	43db      	mvns	r3, r3
 8003a24:	401a      	ands	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_SetLPTIMClockSource>:
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	041b      	lsls	r3, r3, #16
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <LL_RCC_SetRNGClockSource>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_SetADCClockSource>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_SetRTCClockSource>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <LL_RCC_GetRTCClockSource>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <LL_RCC_ForceBackupDomainReset>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d058      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b6c:	f7fe fda6 	bl	80026bc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b70:	f7fd f95a 	bl	8000e28 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b76:	e009      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fd f956 	bl	8000e28 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d902      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	74fb      	strb	r3, [r7, #19]
        break;
 8003b8a:	e006      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b8c:	4b7b      	ldr	r3, [pc, #492]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d1ee      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d13c      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ba0:	f7ff ffa7 	bl	8003af2 <LL_RCC_GetRTCClockSource>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d00f      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bbc:	f7ff ffa5 	bl	8003b0a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc0:	f7ff ffb3 	bl	8003b2a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d014      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd f926 	bl	8000e28 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fd f922 	bl	8000e28 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d902      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	74fb      	strb	r3, [r7, #19]
            break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bf8:	f7ff feb4 	bl	8003964 <LL_RCC_LSE_IsReady>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d1ee      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff5b 	bl	8003ac8 <LL_RCC_SetRTCClockSource>
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
 8003c18:	e001      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fea9 	bl	8003986 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d004      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fe9e 	bl	8003986 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fec0 	bl	80039e0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fee6 	bl	8003a42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fedb 	bl	8003a42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fed0 	bl	8003a42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d004      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fea9 	bl	8003a0a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fe9e 	bl	8003a0a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fe93 	bl	8003a0a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d011      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fe5e 	bl	80039b6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d107      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d010      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fea5 	bl	8003a74 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d40:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d011      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fea3 	bl	8003a9e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d60:	d107      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	58000400 	.word	0x58000400

08003d80 <LL_RCC_GetUSARTClockSource>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	401a      	ands	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	4313      	orrs	r3, r2
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <LL_RCC_GetLPUARTClockSource>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4013      	ands	r3, r2
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e042      	b.n	8003e5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc feda 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	; 0x24
 8003df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8c3 	bl	8003f90 <UART_SetConfig>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e022      	b.n	8003e5a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fb07 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb8d 	bl	8004572 <UART_CheckIdleState>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b08a      	sub	sp, #40	; 0x28
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	f040 8083 	bne.w	8003f84 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_Transmit+0x28>
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07b      	b.n	8003f86 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_UART_Transmit+0x3a>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e074      	b.n	8003f86 <HAL_UART_Transmit+0x124>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2221      	movs	r2, #33	; 0x21
 8003eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eb4:	f7fc ffb8 	bl	8000e28 <HAL_GetTick>
 8003eb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d108      	bne.n	8003ee6 <HAL_UART_Transmit+0x84>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	e003      	b.n	8003eee <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ef6:	e02c      	b.n	8003f52 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb80 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e039      	b.n	8003f86 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e007      	b.n	8003f40 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1cc      	bne.n	8003ef8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2140      	movs	r1, #64	; 0x40
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fb4d 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e006      	b.n	8003f86 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4bab      	ldr	r3, [pc, #684]	; (8004268 <UART_SetConfig+0x2d8>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	69f9      	ldr	r1, [r7, #28]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4aa0      	ldr	r2, [pc, #640]	; (800426c <UART_SetConfig+0x2dc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004002:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	69f9      	ldr	r1, [r7, #28]
 800400c:	430b      	orrs	r3, r1
 800400e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f023 010f 	bic.w	r1, r3, #15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a91      	ldr	r2, [pc, #580]	; (8004270 <UART_SetConfig+0x2e0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d122      	bne.n	8004076 <UART_SetConfig+0xe6>
 8004030:	2003      	movs	r0, #3
 8004032:	f7ff fea5 	bl	8003d80 <LL_RCC_GetUSARTClockSource>
 8004036:	4603      	mov	r3, r0
 8004038:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800403c:	2b03      	cmp	r3, #3
 800403e:	d817      	bhi.n	8004070 <UART_SetConfig+0xe0>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0xb8>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	08004059 	.word	0x08004059
 800404c:	08004065 	.word	0x08004065
 8004050:	0800405f 	.word	0x0800405f
 8004054:	0800406b 	.word	0x0800406b
 8004058:	2301      	movs	r3, #1
 800405a:	76fb      	strb	r3, [r7, #27]
 800405c:	e072      	b.n	8004144 <UART_SetConfig+0x1b4>
 800405e:	2302      	movs	r3, #2
 8004060:	76fb      	strb	r3, [r7, #27]
 8004062:	e06f      	b.n	8004144 <UART_SetConfig+0x1b4>
 8004064:	2304      	movs	r3, #4
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	e06c      	b.n	8004144 <UART_SetConfig+0x1b4>
 800406a:	2308      	movs	r3, #8
 800406c:	76fb      	strb	r3, [r7, #27]
 800406e:	e069      	b.n	8004144 <UART_SetConfig+0x1b4>
 8004070:	2310      	movs	r3, #16
 8004072:	76fb      	strb	r3, [r7, #27]
 8004074:	e066      	b.n	8004144 <UART_SetConfig+0x1b4>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7e      	ldr	r2, [pc, #504]	; (8004274 <UART_SetConfig+0x2e4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d134      	bne.n	80040ea <UART_SetConfig+0x15a>
 8004080:	200c      	movs	r0, #12
 8004082:	f7ff fe7d 	bl	8003d80 <LL_RCC_GetUSARTClockSource>
 8004086:	4603      	mov	r3, r0
 8004088:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d829      	bhi.n	80040e4 <UART_SetConfig+0x154>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <UART_SetConfig+0x108>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040cd 	.word	0x080040cd
 800409c:	080040e5 	.word	0x080040e5
 80040a0:	080040e5 	.word	0x080040e5
 80040a4:	080040e5 	.word	0x080040e5
 80040a8:	080040d9 	.word	0x080040d9
 80040ac:	080040e5 	.word	0x080040e5
 80040b0:	080040e5 	.word	0x080040e5
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	080040d3 	.word	0x080040d3
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040e5 	.word	0x080040e5
 80040c8:	080040df 	.word	0x080040df
 80040cc:	2300      	movs	r3, #0
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e038      	b.n	8004144 <UART_SetConfig+0x1b4>
 80040d2:	2302      	movs	r3, #2
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e035      	b.n	8004144 <UART_SetConfig+0x1b4>
 80040d8:	2304      	movs	r3, #4
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e032      	b.n	8004144 <UART_SetConfig+0x1b4>
 80040de:	2308      	movs	r3, #8
 80040e0:	76fb      	strb	r3, [r7, #27]
 80040e2:	e02f      	b.n	8004144 <UART_SetConfig+0x1b4>
 80040e4:	2310      	movs	r3, #16
 80040e6:	76fb      	strb	r3, [r7, #27]
 80040e8:	e02c      	b.n	8004144 <UART_SetConfig+0x1b4>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5f      	ldr	r2, [pc, #380]	; (800426c <UART_SetConfig+0x2dc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d125      	bne.n	8004140 <UART_SetConfig+0x1b0>
 80040f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80040f8:	f7ff fe54 	bl	8003da4 <LL_RCC_GetLPUARTClockSource>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004102:	d017      	beq.n	8004134 <UART_SetConfig+0x1a4>
 8004104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004108:	d817      	bhi.n	800413a <UART_SetConfig+0x1aa>
 800410a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410e:	d00b      	beq.n	8004128 <UART_SetConfig+0x198>
 8004110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004114:	d811      	bhi.n	800413a <UART_SetConfig+0x1aa>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <UART_SetConfig+0x192>
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d006      	beq.n	800412e <UART_SetConfig+0x19e>
 8004120:	e00b      	b.n	800413a <UART_SetConfig+0x1aa>
 8004122:	2300      	movs	r3, #0
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e00d      	b.n	8004144 <UART_SetConfig+0x1b4>
 8004128:	2302      	movs	r3, #2
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e00a      	b.n	8004144 <UART_SetConfig+0x1b4>
 800412e:	2304      	movs	r3, #4
 8004130:	76fb      	strb	r3, [r7, #27]
 8004132:	e007      	b.n	8004144 <UART_SetConfig+0x1b4>
 8004134:	2308      	movs	r3, #8
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	e004      	b.n	8004144 <UART_SetConfig+0x1b4>
 800413a:	2310      	movs	r3, #16
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e001      	b.n	8004144 <UART_SetConfig+0x1b4>
 8004140:	2310      	movs	r3, #16
 8004142:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a48      	ldr	r2, [pc, #288]	; (800426c <UART_SetConfig+0x2dc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	f040 8098 	bne.w	8004280 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004150:	7efb      	ldrb	r3, [r7, #27]
 8004152:	2b08      	cmp	r3, #8
 8004154:	d823      	bhi.n	800419e <UART_SetConfig+0x20e>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x1cc>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004181 	.word	0x08004181
 8004160:	0800419f 	.word	0x0800419f
 8004164:	08004189 	.word	0x08004189
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800418f 	.word	0x0800418f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	0800419f 	.word	0x0800419f
 8004178:	0800419f 	.word	0x0800419f
 800417c:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7ff fb16 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004184:	6178      	str	r0, [r7, #20]
        break;
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <UART_SetConfig+0x2e8>)
 800418a:	617b      	str	r3, [r7, #20]
        break;
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7ff fa5b 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8004192:	6178      	str	r0, [r7, #20]
        break;
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	617b      	str	r3, [r7, #20]
        break;
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	76bb      	strb	r3, [r7, #26]
        break;
 80041a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8128 	beq.w	8004400 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <UART_SetConfig+0x2ec>)
 80041b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ba:	461a      	mov	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d305      	bcc.n	80041e0 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d902      	bls.n	80041e6 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	76bb      	strb	r3, [r7, #26]
 80041e4:	e10c      	b.n	8004400 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <UART_SetConfig+0x2ec>)
 80041f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	f7fc f817 	bl	8000230 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	020b      	lsls	r3, r1, #8
 8004214:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004218:	0202      	lsls	r2, r0, #8
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	6849      	ldr	r1, [r1, #4]
 800421e:	0849      	lsrs	r1, r1, #1
 8004220:	4608      	mov	r0, r1
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	1814      	adds	r4, r2, r0
 8004228:	eb43 0501 	adc.w	r5, r3, r1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	461a      	mov	r2, r3
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f7fb fff9 	bl	8000230 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4613      	mov	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424c:	d308      	bcc.n	8004260 <UART_SetConfig+0x2d0>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004254:	d204      	bcs.n	8004260 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	e0cf      	b.n	8004400 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	76bb      	strb	r3, [r7, #26]
 8004264:	e0cc      	b.n	8004400 <UART_SetConfig+0x470>
 8004266:	bf00      	nop
 8004268:	cfff69f3 	.word	0xcfff69f3
 800426c:	40008000 	.word	0x40008000
 8004270:	40013800 	.word	0x40013800
 8004274:	40004400 	.word	0x40004400
 8004278:	00f42400 	.word	0x00f42400
 800427c:	08005390 	.word	0x08005390
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	d165      	bne.n	8004356 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800428a:	7efb      	ldrb	r3, [r7, #27]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d828      	bhi.n	80042e2 <UART_SetConfig+0x352>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x308>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080042e3 	.word	0x080042e3
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042e3 	.word	0x080042e3
 80042b0:	080042e3 	.word	0x080042e3
 80042b4:	080042e3 	.word	0x080042e3
 80042b8:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7ff fa78 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 80042c0:	6178      	str	r0, [r7, #20]
        break;
 80042c2:	e013      	b.n	80042ec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c4:	f7ff fa86 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 80042c8:	6178      	str	r0, [r7, #20]
        break;
 80042ca:	e00f      	b.n	80042ec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <UART_SetConfig+0x498>)
 80042ce:	617b      	str	r3, [r7, #20]
        break;
 80042d0:	e00c      	b.n	80042ec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7ff f9b9 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 80042d6:	6178      	str	r0, [r7, #20]
        break;
 80042d8:	e008      	b.n	80042ec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042de:	617b      	str	r3, [r7, #20]
        break;
 80042e0:	e004      	b.n	80042ec <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	76bb      	strb	r3, [r7, #26]
        break;
 80042ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8086 	beq.w	8004400 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	4a4c      	ldr	r2, [pc, #304]	; (800442c <UART_SetConfig+0x49c>)
 80042fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042fe:	461a      	mov	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fbb3 f3f2 	udiv	r3, r3, r2
 8004306:	005a      	lsls	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	441a      	add	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	b29b      	uxth	r3, r3
 800431a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b0f      	cmp	r3, #15
 8004320:	d916      	bls.n	8004350 <UART_SetConfig+0x3c0>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d212      	bcs.n	8004350 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f023 030f 	bic.w	r3, r3, #15
 8004332:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	b29b      	uxth	r3, r3
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	b29a      	uxth	r2, r3
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	4313      	orrs	r3, r2
 8004344:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	89fa      	ldrh	r2, [r7, #14]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	e057      	b.n	8004400 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	76bb      	strb	r3, [r7, #26]
 8004354:	e054      	b.n	8004400 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004356:	7efb      	ldrb	r3, [r7, #27]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d828      	bhi.n	80043ae <UART_SetConfig+0x41e>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0x3d4>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004389 	.word	0x08004389
 8004368:	08004391 	.word	0x08004391
 800436c:	08004399 	.word	0x08004399
 8004370:	080043af 	.word	0x080043af
 8004374:	0800439f 	.word	0x0800439f
 8004378:	080043af 	.word	0x080043af
 800437c:	080043af 	.word	0x080043af
 8004380:	080043af 	.word	0x080043af
 8004384:	080043a7 	.word	0x080043a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004388:	f7ff fa12 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 800438c:	6178      	str	r0, [r7, #20]
        break;
 800438e:	e013      	b.n	80043b8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004390:	f7ff fa20 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8004394:	6178      	str	r0, [r7, #20]
        break;
 8004396:	e00f      	b.n	80043b8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004398:	4b23      	ldr	r3, [pc, #140]	; (8004428 <UART_SetConfig+0x498>)
 800439a:	617b      	str	r3, [r7, #20]
        break;
 800439c:	e00c      	b.n	80043b8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439e:	f7ff f953 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 80043a2:	6178      	str	r0, [r7, #20]
        break;
 80043a4:	e008      	b.n	80043b8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043aa:	617b      	str	r3, [r7, #20]
        break;
 80043ac:	e004      	b.n	80043b8 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	76bb      	strb	r3, [r7, #26]
        break;
 80043b6:	bf00      	nop
    }

    if (pclk != 0U)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d020      	beq.n	8004400 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	4a1a      	ldr	r2, [pc, #104]	; (800442c <UART_SetConfig+0x49c>)
 80043c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c8:	461a      	mov	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	d908      	bls.n	80043fc <UART_SetConfig+0x46c>
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d204      	bcs.n	80043fc <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e001      	b.n	8004400 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800441c:	7ebb      	ldrb	r3, [r7, #26]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bdb0      	pop	{r4, r5, r7, pc}
 8004426:	bf00      	nop
 8004428:	00f42400 	.word	0x00f42400
 800442c:	08005390 	.word	0x08005390

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d10a      	bne.n	8004546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af02      	add	r7, sp, #8
 8004578:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004582:	f7fc fc51 	bl	8000e28 <HAL_GetTick>
 8004586:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d10e      	bne.n	80045b4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004596:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f82f 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e025      	b.n	8004600 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d10e      	bne.n	80045e0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f819 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e00f      	b.n	8004600 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b09c      	sub	sp, #112	; 0x70
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004618:	e0a9      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004620:	f000 80a5 	beq.w	800476e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7fc fc00 	bl	8000e28 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <UART_WaitOnFlagUntilTimeout+0x32>
 8004634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004636:	2b00      	cmp	r3, #0
 8004638:	d140      	bne.n	80046bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800464e:	667b      	str	r3, [r7, #100]	; 0x64
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800465a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800465e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	663b      	str	r3, [r7, #96]	; 0x60
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800468c:	64ba      	str	r2, [r7, #72]	; 0x48
 800468e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e069      	b.n	8004790 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d051      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d8:	d149      	bne.n	800476e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
 8004704:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3308      	adds	r3, #8
 800471c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	66bb      	str	r3, [r7, #104]	; 0x68
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004736:	623a      	str	r2, [r7, #32]
 8004738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	69f9      	ldr	r1, [r7, #28]
 800473c:	6a3a      	ldr	r2, [r7, #32]
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	61bb      	str	r3, [r7, #24]
   return(result);
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e010      	b.n	8004790 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4013      	ands	r3, r2
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	429a      	cmp	r2, r3
 800478a:	f43f af46 	beq.w	800461a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3770      	adds	r7, #112	; 0x70
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_UARTEx_DisableFifoMode+0x16>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e027      	b.n	80047fe <HAL_UARTEx_DisableFifoMode+0x66>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2224      	movs	r2, #36	; 0x24
 80047ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800481c:	2302      	movs	r3, #2
 800481e:	e02d      	b.n	800487c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f84f 	bl	8004900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e02d      	b.n	80048f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f811 	bl	8004900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490c:	2b00      	cmp	r3, #0
 800490e:	d108      	bne.n	8004922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004920:	e031      	b.n	8004986 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004922:	2308      	movs	r3, #8
 8004924:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004926:	2308      	movs	r3, #8
 8004928:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	0e5b      	lsrs	r3, r3, #25
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	0f5b      	lsrs	r3, r3, #29
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800494a:	7bbb      	ldrb	r3, [r7, #14]
 800494c:	7b3a      	ldrb	r2, [r7, #12]
 800494e:	4910      	ldr	r1, [pc, #64]	; (8004990 <UARTEx_SetNbDataToProcess+0x90>)
 8004950:	5c8a      	ldrb	r2, [r1, r2]
 8004952:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004956:	7b3a      	ldrb	r2, [r7, #12]
 8004958:	490e      	ldr	r1, [pc, #56]	; (8004994 <UARTEx_SetNbDataToProcess+0x94>)
 800495a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800495c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	7b7a      	ldrb	r2, [r7, #13]
 800496c:	4908      	ldr	r1, [pc, #32]	; (8004990 <UARTEx_SetNbDataToProcess+0x90>)
 800496e:	5c8a      	ldrb	r2, [r1, r2]
 8004970:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004974:	7b7a      	ldrb	r2, [r7, #13]
 8004976:	4907      	ldr	r1, [pc, #28]	; (8004994 <UARTEx_SetNbDataToProcess+0x94>)
 8004978:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800497a:	fb93 f3f2 	sdiv	r3, r3, r2
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr
 8004990:	080053a8 	.word	0x080053a8
 8004994:	080053b0 	.word	0x080053b0

08004998 <__errno>:
 8004998:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <__errno+0x8>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	2000000c 	.word	0x2000000c

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f000 fc60 	bl	800527c <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	080053f4 	.word	0x080053f4
 80049e0:	080053f4 	.word	0x080053f4
 80049e4:	080053f4 	.word	0x080053f4
 80049e8:	080053f8 	.word	0x080053f8

080049ec <memset>:
 80049ec:	4402      	add	r2, r0
 80049ee:	4603      	mov	r3, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <sniprintf>:
 80049fc:	b40c      	push	{r2, r3}
 80049fe:	b530      	push	{r4, r5, lr}
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <sniprintf+0x64>)
 8004a02:	1e0c      	subs	r4, r1, #0
 8004a04:	681d      	ldr	r5, [r3, #0]
 8004a06:	b09d      	sub	sp, #116	; 0x74
 8004a08:	da08      	bge.n	8004a1c <sniprintf+0x20>
 8004a0a:	238b      	movs	r3, #139	; 0x8b
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a12:	b01d      	add	sp, #116	; 0x74
 8004a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a18:	b002      	add	sp, #8
 8004a1a:	4770      	bx	lr
 8004a1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004a20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a24:	bf14      	ite	ne
 8004a26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004a2a:	4623      	moveq	r3, r4
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	9307      	str	r3, [sp, #28]
 8004a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a34:	9002      	str	r0, [sp, #8]
 8004a36:	9006      	str	r0, [sp, #24]
 8004a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a3e:	ab21      	add	r3, sp, #132	; 0x84
 8004a40:	a902      	add	r1, sp, #8
 8004a42:	4628      	mov	r0, r5
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	f000 f869 	bl	8004b1c <_svfiprintf_r>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	bfbc      	itt	lt
 8004a4e:	238b      	movlt	r3, #139	; 0x8b
 8004a50:	602b      	strlt	r3, [r5, #0]
 8004a52:	2c00      	cmp	r4, #0
 8004a54:	d0dd      	beq.n	8004a12 <sniprintf+0x16>
 8004a56:	9b02      	ldr	r3, [sp, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e7d9      	b.n	8004a12 <sniprintf+0x16>
 8004a5e:	bf00      	nop
 8004a60:	2000000c 	.word	0x2000000c

08004a64 <__ssputs_r>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	688e      	ldr	r6, [r1, #8]
 8004a6a:	429e      	cmp	r6, r3
 8004a6c:	4682      	mov	sl, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	4690      	mov	r8, r2
 8004a72:	461f      	mov	r7, r3
 8004a74:	d838      	bhi.n	8004ae8 <__ssputs_r+0x84>
 8004a76:	898a      	ldrh	r2, [r1, #12]
 8004a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a7c:	d032      	beq.n	8004ae4 <__ssputs_r+0x80>
 8004a7e:	6825      	ldr	r5, [r4, #0]
 8004a80:	6909      	ldr	r1, [r1, #16]
 8004a82:	eba5 0901 	sub.w	r9, r5, r1
 8004a86:	6965      	ldr	r5, [r4, #20]
 8004a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a90:	3301      	adds	r3, #1
 8004a92:	444b      	add	r3, r9
 8004a94:	106d      	asrs	r5, r5, #1
 8004a96:	429d      	cmp	r5, r3
 8004a98:	bf38      	it	cc
 8004a9a:	461d      	movcc	r5, r3
 8004a9c:	0553      	lsls	r3, r2, #21
 8004a9e:	d531      	bpl.n	8004b04 <__ssputs_r+0xa0>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f000 fb45 	bl	8005130 <_malloc_r>
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	b950      	cbnz	r0, 8004ac0 <__ssputs_r+0x5c>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	f8ca 3000 	str.w	r3, [sl]
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab6:	81a3      	strh	r3, [r4, #12]
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac0:	6921      	ldr	r1, [r4, #16]
 8004ac2:	464a      	mov	r2, r9
 8004ac4:	f000 fabe 	bl	8005044 <memcpy>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	6126      	str	r6, [r4, #16]
 8004ad6:	6165      	str	r5, [r4, #20]
 8004ad8:	444e      	add	r6, r9
 8004ada:	eba5 0509 	sub.w	r5, r5, r9
 8004ade:	6026      	str	r6, [r4, #0]
 8004ae0:	60a5      	str	r5, [r4, #8]
 8004ae2:	463e      	mov	r6, r7
 8004ae4:	42be      	cmp	r6, r7
 8004ae6:	d900      	bls.n	8004aea <__ssputs_r+0x86>
 8004ae8:	463e      	mov	r6, r7
 8004aea:	4632      	mov	r2, r6
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	4641      	mov	r1, r8
 8004af0:	f000 fab6 	bl	8005060 <memmove>
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	1b9b      	subs	r3, r3, r6
 8004afa:	4432      	add	r2, r6
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	6022      	str	r2, [r4, #0]
 8004b00:	2000      	movs	r0, #0
 8004b02:	e7db      	b.n	8004abc <__ssputs_r+0x58>
 8004b04:	462a      	mov	r2, r5
 8004b06:	f000 fb6d 	bl	80051e4 <_realloc_r>
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d1e1      	bne.n	8004ad4 <__ssputs_r+0x70>
 8004b10:	6921      	ldr	r1, [r4, #16]
 8004b12:	4650      	mov	r0, sl
 8004b14:	f000 fabe 	bl	8005094 <_free_r>
 8004b18:	e7c7      	b.n	8004aaa <__ssputs_r+0x46>
	...

08004b1c <_svfiprintf_r>:
 8004b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	4698      	mov	r8, r3
 8004b22:	898b      	ldrh	r3, [r1, #12]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	b09d      	sub	sp, #116	; 0x74
 8004b28:	4607      	mov	r7, r0
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	d50e      	bpl.n	8004b4e <_svfiprintf_r+0x32>
 8004b30:	690b      	ldr	r3, [r1, #16]
 8004b32:	b963      	cbnz	r3, 8004b4e <_svfiprintf_r+0x32>
 8004b34:	2140      	movs	r1, #64	; 0x40
 8004b36:	f000 fafb 	bl	8005130 <_malloc_r>
 8004b3a:	6028      	str	r0, [r5, #0]
 8004b3c:	6128      	str	r0, [r5, #16]
 8004b3e:	b920      	cbnz	r0, 8004b4a <_svfiprintf_r+0x2e>
 8004b40:	230c      	movs	r3, #12
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b48:	e0d1      	b.n	8004cee <_svfiprintf_r+0x1d2>
 8004b4a:	2340      	movs	r3, #64	; 0x40
 8004b4c:	616b      	str	r3, [r5, #20]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9309      	str	r3, [sp, #36]	; 0x24
 8004b52:	2320      	movs	r3, #32
 8004b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b58:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b5c:	2330      	movs	r3, #48	; 0x30
 8004b5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d08 <_svfiprintf_r+0x1ec>
 8004b62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b66:	f04f 0901 	mov.w	r9, #1
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	469a      	mov	sl, r3
 8004b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b72:	b10a      	cbz	r2, 8004b78 <_svfiprintf_r+0x5c>
 8004b74:	2a25      	cmp	r2, #37	; 0x25
 8004b76:	d1f9      	bne.n	8004b6c <_svfiprintf_r+0x50>
 8004b78:	ebba 0b04 	subs.w	fp, sl, r4
 8004b7c:	d00b      	beq.n	8004b96 <_svfiprintf_r+0x7a>
 8004b7e:	465b      	mov	r3, fp
 8004b80:	4622      	mov	r2, r4
 8004b82:	4629      	mov	r1, r5
 8004b84:	4638      	mov	r0, r7
 8004b86:	f7ff ff6d 	bl	8004a64 <__ssputs_r>
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f000 80aa 	beq.w	8004ce4 <_svfiprintf_r+0x1c8>
 8004b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b92:	445a      	add	r2, fp
 8004b94:	9209      	str	r2, [sp, #36]	; 0x24
 8004b96:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80a2 	beq.w	8004ce4 <_svfiprintf_r+0x1c8>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004baa:	f10a 0a01 	add.w	sl, sl, #1
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	9307      	str	r3, [sp, #28]
 8004bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bb8:	4654      	mov	r4, sl
 8004bba:	2205      	movs	r2, #5
 8004bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc0:	4851      	ldr	r0, [pc, #324]	; (8004d08 <_svfiprintf_r+0x1ec>)
 8004bc2:	f7fb fae5 	bl	8000190 <memchr>
 8004bc6:	9a04      	ldr	r2, [sp, #16]
 8004bc8:	b9d8      	cbnz	r0, 8004c02 <_svfiprintf_r+0xe6>
 8004bca:	06d0      	lsls	r0, r2, #27
 8004bcc:	bf44      	itt	mi
 8004bce:	2320      	movmi	r3, #32
 8004bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd4:	0711      	lsls	r1, r2, #28
 8004bd6:	bf44      	itt	mi
 8004bd8:	232b      	movmi	r3, #43	; 0x2b
 8004bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bde:	f89a 3000 	ldrb.w	r3, [sl]
 8004be2:	2b2a      	cmp	r3, #42	; 0x2a
 8004be4:	d015      	beq.n	8004c12 <_svfiprintf_r+0xf6>
 8004be6:	9a07      	ldr	r2, [sp, #28]
 8004be8:	4654      	mov	r4, sl
 8004bea:	2000      	movs	r0, #0
 8004bec:	f04f 0c0a 	mov.w	ip, #10
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bf6:	3b30      	subs	r3, #48	; 0x30
 8004bf8:	2b09      	cmp	r3, #9
 8004bfa:	d94e      	bls.n	8004c9a <_svfiprintf_r+0x17e>
 8004bfc:	b1b0      	cbz	r0, 8004c2c <_svfiprintf_r+0x110>
 8004bfe:	9207      	str	r2, [sp, #28]
 8004c00:	e014      	b.n	8004c2c <_svfiprintf_r+0x110>
 8004c02:	eba0 0308 	sub.w	r3, r0, r8
 8004c06:	fa09 f303 	lsl.w	r3, r9, r3
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	9304      	str	r3, [sp, #16]
 8004c0e:	46a2      	mov	sl, r4
 8004c10:	e7d2      	b.n	8004bb8 <_svfiprintf_r+0x9c>
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	1d19      	adds	r1, r3, #4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	9103      	str	r1, [sp, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bfbb      	ittet	lt
 8004c1e:	425b      	neglt	r3, r3
 8004c20:	f042 0202 	orrlt.w	r2, r2, #2
 8004c24:	9307      	strge	r3, [sp, #28]
 8004c26:	9307      	strlt	r3, [sp, #28]
 8004c28:	bfb8      	it	lt
 8004c2a:	9204      	strlt	r2, [sp, #16]
 8004c2c:	7823      	ldrb	r3, [r4, #0]
 8004c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c30:	d10c      	bne.n	8004c4c <_svfiprintf_r+0x130>
 8004c32:	7863      	ldrb	r3, [r4, #1]
 8004c34:	2b2a      	cmp	r3, #42	; 0x2a
 8004c36:	d135      	bne.n	8004ca4 <_svfiprintf_r+0x188>
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	9203      	str	r2, [sp, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bfb8      	it	lt
 8004c44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c48:	3402      	adds	r4, #2
 8004c4a:	9305      	str	r3, [sp, #20]
 8004c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d18 <_svfiprintf_r+0x1fc>
 8004c50:	7821      	ldrb	r1, [r4, #0]
 8004c52:	2203      	movs	r2, #3
 8004c54:	4650      	mov	r0, sl
 8004c56:	f7fb fa9b 	bl	8000190 <memchr>
 8004c5a:	b140      	cbz	r0, 8004c6e <_svfiprintf_r+0x152>
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	eba0 000a 	sub.w	r0, r0, sl
 8004c62:	fa03 f000 	lsl.w	r0, r3, r0
 8004c66:	9b04      	ldr	r3, [sp, #16]
 8004c68:	4303      	orrs	r3, r0
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c72:	4826      	ldr	r0, [pc, #152]	; (8004d0c <_svfiprintf_r+0x1f0>)
 8004c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c78:	2206      	movs	r2, #6
 8004c7a:	f7fb fa89 	bl	8000190 <memchr>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d038      	beq.n	8004cf4 <_svfiprintf_r+0x1d8>
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <_svfiprintf_r+0x1f4>)
 8004c84:	bb1b      	cbnz	r3, 8004cce <_svfiprintf_r+0x1b2>
 8004c86:	9b03      	ldr	r3, [sp, #12]
 8004c88:	3307      	adds	r3, #7
 8004c8a:	f023 0307 	bic.w	r3, r3, #7
 8004c8e:	3308      	adds	r3, #8
 8004c90:	9303      	str	r3, [sp, #12]
 8004c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c94:	4433      	add	r3, r6
 8004c96:	9309      	str	r3, [sp, #36]	; 0x24
 8004c98:	e767      	b.n	8004b6a <_svfiprintf_r+0x4e>
 8004c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e7a5      	b.n	8004bf0 <_svfiprintf_r+0xd4>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	3401      	adds	r4, #1
 8004ca8:	9305      	str	r3, [sp, #20]
 8004caa:	4619      	mov	r1, r3
 8004cac:	f04f 0c0a 	mov.w	ip, #10
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb6:	3a30      	subs	r2, #48	; 0x30
 8004cb8:	2a09      	cmp	r2, #9
 8004cba:	d903      	bls.n	8004cc4 <_svfiprintf_r+0x1a8>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0c5      	beq.n	8004c4c <_svfiprintf_r+0x130>
 8004cc0:	9105      	str	r1, [sp, #20]
 8004cc2:	e7c3      	b.n	8004c4c <_svfiprintf_r+0x130>
 8004cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cc8:	4604      	mov	r4, r0
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e7f0      	b.n	8004cb0 <_svfiprintf_r+0x194>
 8004cce:	ab03      	add	r3, sp, #12
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <_svfiprintf_r+0x1f8>)
 8004cd6:	a904      	add	r1, sp, #16
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f3af 8000 	nop.w
 8004cde:	1c42      	adds	r2, r0, #1
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	d1d6      	bne.n	8004c92 <_svfiprintf_r+0x176>
 8004ce4:	89ab      	ldrh	r3, [r5, #12]
 8004ce6:	065b      	lsls	r3, r3, #25
 8004ce8:	f53f af2c 	bmi.w	8004b44 <_svfiprintf_r+0x28>
 8004cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cee:	b01d      	add	sp, #116	; 0x74
 8004cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf4:	ab03      	add	r3, sp, #12
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <_svfiprintf_r+0x1f8>)
 8004cfc:	a904      	add	r1, sp, #16
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f000 f87a 	bl	8004df8 <_printf_i>
 8004d04:	e7eb      	b.n	8004cde <_svfiprintf_r+0x1c2>
 8004d06:	bf00      	nop
 8004d08:	080053b8 	.word	0x080053b8
 8004d0c:	080053c2 	.word	0x080053c2
 8004d10:	00000000 	.word	0x00000000
 8004d14:	08004a65 	.word	0x08004a65
 8004d18:	080053be 	.word	0x080053be

08004d1c <_printf_common>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	4616      	mov	r6, r2
 8004d22:	4699      	mov	r9, r3
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bfb8      	it	lt
 8004d30:	4613      	movlt	r3, r2
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d38:	4607      	mov	r7, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b10a      	cbz	r2, 8004d42 <_printf_common+0x26>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	0699      	lsls	r1, r3, #26
 8004d46:	bf42      	ittt	mi
 8004d48:	6833      	ldrmi	r3, [r6, #0]
 8004d4a:	3302      	addmi	r3, #2
 8004d4c:	6033      	strmi	r3, [r6, #0]
 8004d4e:	6825      	ldr	r5, [r4, #0]
 8004d50:	f015 0506 	ands.w	r5, r5, #6
 8004d54:	d106      	bne.n	8004d64 <_printf_common+0x48>
 8004d56:	f104 0a19 	add.w	sl, r4, #25
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	6832      	ldr	r2, [r6, #0]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dc26      	bgt.n	8004db2 <_printf_common+0x96>
 8004d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d68:	1e13      	subs	r3, r2, #0
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	0692      	lsls	r2, r2, #26
 8004d72:	d42b      	bmi.n	8004dcc <_printf_common+0xb0>
 8004d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d78:	4649      	mov	r1, r9
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	47c0      	blx	r8
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d01e      	beq.n	8004dc0 <_printf_common+0xa4>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	68e5      	ldr	r5, [r4, #12]
 8004d86:	6832      	ldr	r2, [r6, #0]
 8004d88:	f003 0306 	and.w	r3, r3, #6
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	bf08      	it	eq
 8004d90:	1aad      	subeq	r5, r5, r2
 8004d92:	68a3      	ldr	r3, [r4, #8]
 8004d94:	6922      	ldr	r2, [r4, #16]
 8004d96:	bf0c      	ite	eq
 8004d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d9c:	2500      	movne	r5, #0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bfc4      	itt	gt
 8004da2:	1a9b      	subgt	r3, r3, r2
 8004da4:	18ed      	addgt	r5, r5, r3
 8004da6:	2600      	movs	r6, #0
 8004da8:	341a      	adds	r4, #26
 8004daa:	42b5      	cmp	r5, r6
 8004dac:	d11a      	bne.n	8004de4 <_printf_common+0xc8>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e008      	b.n	8004dc4 <_printf_common+0xa8>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4652      	mov	r2, sl
 8004db6:	4649      	mov	r1, r9
 8004db8:	4638      	mov	r0, r7
 8004dba:	47c0      	blx	r8
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d103      	bne.n	8004dc8 <_printf_common+0xac>
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	3501      	adds	r5, #1
 8004dca:	e7c6      	b.n	8004d5a <_printf_common+0x3e>
 8004dcc:	18e1      	adds	r1, r4, r3
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	2030      	movs	r0, #48	; 0x30
 8004dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dd6:	4422      	add	r2, r4
 8004dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de0:	3302      	adds	r3, #2
 8004de2:	e7c7      	b.n	8004d74 <_printf_common+0x58>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4622      	mov	r2, r4
 8004de8:	4649      	mov	r1, r9
 8004dea:	4638      	mov	r0, r7
 8004dec:	47c0      	blx	r8
 8004dee:	3001      	adds	r0, #1
 8004df0:	d0e6      	beq.n	8004dc0 <_printf_common+0xa4>
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7d9      	b.n	8004daa <_printf_common+0x8e>
	...

08004df8 <_printf_i>:
 8004df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	4691      	mov	r9, r2
 8004e00:	7e27      	ldrb	r7, [r4, #24]
 8004e02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e04:	2f78      	cmp	r7, #120	; 0x78
 8004e06:	4680      	mov	r8, r0
 8004e08:	469a      	mov	sl, r3
 8004e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e0e:	d807      	bhi.n	8004e20 <_printf_i+0x28>
 8004e10:	2f62      	cmp	r7, #98	; 0x62
 8004e12:	d80a      	bhi.n	8004e2a <_printf_i+0x32>
 8004e14:	2f00      	cmp	r7, #0
 8004e16:	f000 80d8 	beq.w	8004fca <_printf_i+0x1d2>
 8004e1a:	2f58      	cmp	r7, #88	; 0x58
 8004e1c:	f000 80a3 	beq.w	8004f66 <_printf_i+0x16e>
 8004e20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e28:	e03a      	b.n	8004ea0 <_printf_i+0xa8>
 8004e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e2e:	2b15      	cmp	r3, #21
 8004e30:	d8f6      	bhi.n	8004e20 <_printf_i+0x28>
 8004e32:	a001      	add	r0, pc, #4	; (adr r0, 8004e38 <_printf_i+0x40>)
 8004e34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004ea5 	.word	0x08004ea5
 8004e40:	08004e21 	.word	0x08004e21
 8004e44:	08004e21 	.word	0x08004e21
 8004e48:	08004e21 	.word	0x08004e21
 8004e4c:	08004e21 	.word	0x08004e21
 8004e50:	08004ea5 	.word	0x08004ea5
 8004e54:	08004e21 	.word	0x08004e21
 8004e58:	08004e21 	.word	0x08004e21
 8004e5c:	08004e21 	.word	0x08004e21
 8004e60:	08004e21 	.word	0x08004e21
 8004e64:	08004fb1 	.word	0x08004fb1
 8004e68:	08004ed5 	.word	0x08004ed5
 8004e6c:	08004f93 	.word	0x08004f93
 8004e70:	08004e21 	.word	0x08004e21
 8004e74:	08004e21 	.word	0x08004e21
 8004e78:	08004fd3 	.word	0x08004fd3
 8004e7c:	08004e21 	.word	0x08004e21
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004e21 	.word	0x08004e21
 8004e88:	08004e21 	.word	0x08004e21
 8004e8c:	08004f9b 	.word	0x08004f9b
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	600a      	str	r2, [r1, #0]
 8004e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0a3      	b.n	8004fec <_printf_i+0x1f4>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	6808      	ldr	r0, [r1, #0]
 8004ea8:	062e      	lsls	r6, r5, #24
 8004eaa:	f100 0304 	add.w	r3, r0, #4
 8004eae:	d50a      	bpl.n	8004ec6 <_printf_i+0xce>
 8004eb0:	6805      	ldr	r5, [r0, #0]
 8004eb2:	600b      	str	r3, [r1, #0]
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	da03      	bge.n	8004ec0 <_printf_i+0xc8>
 8004eb8:	232d      	movs	r3, #45	; 0x2d
 8004eba:	426d      	negs	r5, r5
 8004ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec0:	485e      	ldr	r0, [pc, #376]	; (800503c <_printf_i+0x244>)
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e019      	b.n	8004efa <_printf_i+0x102>
 8004ec6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eca:	6805      	ldr	r5, [r0, #0]
 8004ecc:	600b      	str	r3, [r1, #0]
 8004ece:	bf18      	it	ne
 8004ed0:	b22d      	sxthne	r5, r5
 8004ed2:	e7ef      	b.n	8004eb4 <_printf_i+0xbc>
 8004ed4:	680b      	ldr	r3, [r1, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	1d18      	adds	r0, r3, #4
 8004eda:	6008      	str	r0, [r1, #0]
 8004edc:	0628      	lsls	r0, r5, #24
 8004ede:	d501      	bpl.n	8004ee4 <_printf_i+0xec>
 8004ee0:	681d      	ldr	r5, [r3, #0]
 8004ee2:	e002      	b.n	8004eea <_printf_i+0xf2>
 8004ee4:	0669      	lsls	r1, r5, #25
 8004ee6:	d5fb      	bpl.n	8004ee0 <_printf_i+0xe8>
 8004ee8:	881d      	ldrh	r5, [r3, #0]
 8004eea:	4854      	ldr	r0, [pc, #336]	; (800503c <_printf_i+0x244>)
 8004eec:	2f6f      	cmp	r7, #111	; 0x6f
 8004eee:	bf0c      	ite	eq
 8004ef0:	2308      	moveq	r3, #8
 8004ef2:	230a      	movne	r3, #10
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004efa:	6866      	ldr	r6, [r4, #4]
 8004efc:	60a6      	str	r6, [r4, #8]
 8004efe:	2e00      	cmp	r6, #0
 8004f00:	bfa2      	ittt	ge
 8004f02:	6821      	ldrge	r1, [r4, #0]
 8004f04:	f021 0104 	bicge.w	r1, r1, #4
 8004f08:	6021      	strge	r1, [r4, #0]
 8004f0a:	b90d      	cbnz	r5, 8004f10 <_printf_i+0x118>
 8004f0c:	2e00      	cmp	r6, #0
 8004f0e:	d04d      	beq.n	8004fac <_printf_i+0x1b4>
 8004f10:	4616      	mov	r6, r2
 8004f12:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f16:	fb03 5711 	mls	r7, r3, r1, r5
 8004f1a:	5dc7      	ldrb	r7, [r0, r7]
 8004f1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f20:	462f      	mov	r7, r5
 8004f22:	42bb      	cmp	r3, r7
 8004f24:	460d      	mov	r5, r1
 8004f26:	d9f4      	bls.n	8004f12 <_printf_i+0x11a>
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d10b      	bne.n	8004f44 <_printf_i+0x14c>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	07df      	lsls	r7, r3, #31
 8004f30:	d508      	bpl.n	8004f44 <_printf_i+0x14c>
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	6861      	ldr	r1, [r4, #4]
 8004f36:	4299      	cmp	r1, r3
 8004f38:	bfde      	ittt	le
 8004f3a:	2330      	movle	r3, #48	; 0x30
 8004f3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004f44:	1b92      	subs	r2, r2, r6
 8004f46:	6122      	str	r2, [r4, #16]
 8004f48:	f8cd a000 	str.w	sl, [sp]
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	aa03      	add	r2, sp, #12
 8004f50:	4621      	mov	r1, r4
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff fee2 	bl	8004d1c <_printf_common>
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d14c      	bne.n	8004ff6 <_printf_i+0x1fe>
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f60:	b004      	add	sp, #16
 8004f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f66:	4835      	ldr	r0, [pc, #212]	; (800503c <_printf_i+0x244>)
 8004f68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	680e      	ldr	r6, [r1, #0]
 8004f70:	061f      	lsls	r7, r3, #24
 8004f72:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f76:	600e      	str	r6, [r1, #0]
 8004f78:	d514      	bpl.n	8004fa4 <_printf_i+0x1ac>
 8004f7a:	07d9      	lsls	r1, r3, #31
 8004f7c:	bf44      	itt	mi
 8004f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f82:	6023      	strmi	r3, [r4, #0]
 8004f84:	b91d      	cbnz	r5, 8004f8e <_printf_i+0x196>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	f023 0320 	bic.w	r3, r3, #32
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	2310      	movs	r3, #16
 8004f90:	e7b0      	b.n	8004ef4 <_printf_i+0xfc>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	2378      	movs	r3, #120	; 0x78
 8004f9c:	4828      	ldr	r0, [pc, #160]	; (8005040 <_printf_i+0x248>)
 8004f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fa2:	e7e3      	b.n	8004f6c <_printf_i+0x174>
 8004fa4:	065e      	lsls	r6, r3, #25
 8004fa6:	bf48      	it	mi
 8004fa8:	b2ad      	uxthmi	r5, r5
 8004faa:	e7e6      	b.n	8004f7a <_printf_i+0x182>
 8004fac:	4616      	mov	r6, r2
 8004fae:	e7bb      	b.n	8004f28 <_printf_i+0x130>
 8004fb0:	680b      	ldr	r3, [r1, #0]
 8004fb2:	6826      	ldr	r6, [r4, #0]
 8004fb4:	6960      	ldr	r0, [r4, #20]
 8004fb6:	1d1d      	adds	r5, r3, #4
 8004fb8:	600d      	str	r5, [r1, #0]
 8004fba:	0635      	lsls	r5, r6, #24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0x1cc>
 8004fc0:	6018      	str	r0, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <_printf_i+0x1d2>
 8004fc4:	0671      	lsls	r1, r6, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0x1c8>
 8004fc8:	8018      	strh	r0, [r3, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6123      	str	r3, [r4, #16]
 8004fce:	4616      	mov	r6, r2
 8004fd0:	e7ba      	b.n	8004f48 <_printf_i+0x150>
 8004fd2:	680b      	ldr	r3, [r1, #0]
 8004fd4:	1d1a      	adds	r2, r3, #4
 8004fd6:	600a      	str	r2, [r1, #0]
 8004fd8:	681e      	ldr	r6, [r3, #0]
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7fb f8d6 	bl	8000190 <memchr>
 8004fe4:	b108      	cbz	r0, 8004fea <_printf_i+0x1f2>
 8004fe6:	1b80      	subs	r0, r0, r6
 8004fe8:	6060      	str	r0, [r4, #4]
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff4:	e7a8      	b.n	8004f48 <_printf_i+0x150>
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	47d0      	blx	sl
 8005000:	3001      	adds	r0, #1
 8005002:	d0ab      	beq.n	8004f5c <_printf_i+0x164>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	079b      	lsls	r3, r3, #30
 8005008:	d413      	bmi.n	8005032 <_printf_i+0x23a>
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	4298      	cmp	r0, r3
 8005010:	bfb8      	it	lt
 8005012:	4618      	movlt	r0, r3
 8005014:	e7a4      	b.n	8004f60 <_printf_i+0x168>
 8005016:	2301      	movs	r3, #1
 8005018:	4632      	mov	r2, r6
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	47d0      	blx	sl
 8005020:	3001      	adds	r0, #1
 8005022:	d09b      	beq.n	8004f5c <_printf_i+0x164>
 8005024:	3501      	adds	r5, #1
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	9903      	ldr	r1, [sp, #12]
 800502a:	1a5b      	subs	r3, r3, r1
 800502c:	42ab      	cmp	r3, r5
 800502e:	dcf2      	bgt.n	8005016 <_printf_i+0x21e>
 8005030:	e7eb      	b.n	800500a <_printf_i+0x212>
 8005032:	2500      	movs	r5, #0
 8005034:	f104 0619 	add.w	r6, r4, #25
 8005038:	e7f5      	b.n	8005026 <_printf_i+0x22e>
 800503a:	bf00      	nop
 800503c:	080053c9 	.word	0x080053c9
 8005040:	080053da 	.word	0x080053da

08005044 <memcpy>:
 8005044:	440a      	add	r2, r1
 8005046:	4291      	cmp	r1, r2
 8005048:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800504c:	d100      	bne.n	8005050 <memcpy+0xc>
 800504e:	4770      	bx	lr
 8005050:	b510      	push	{r4, lr}
 8005052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505a:	4291      	cmp	r1, r2
 800505c:	d1f9      	bne.n	8005052 <memcpy+0xe>
 800505e:	bd10      	pop	{r4, pc}

08005060 <memmove>:
 8005060:	4288      	cmp	r0, r1
 8005062:	b510      	push	{r4, lr}
 8005064:	eb01 0402 	add.w	r4, r1, r2
 8005068:	d902      	bls.n	8005070 <memmove+0x10>
 800506a:	4284      	cmp	r4, r0
 800506c:	4623      	mov	r3, r4
 800506e:	d807      	bhi.n	8005080 <memmove+0x20>
 8005070:	1e43      	subs	r3, r0, #1
 8005072:	42a1      	cmp	r1, r4
 8005074:	d008      	beq.n	8005088 <memmove+0x28>
 8005076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507e:	e7f8      	b.n	8005072 <memmove+0x12>
 8005080:	4402      	add	r2, r0
 8005082:	4601      	mov	r1, r0
 8005084:	428a      	cmp	r2, r1
 8005086:	d100      	bne.n	800508a <memmove+0x2a>
 8005088:	bd10      	pop	{r4, pc}
 800508a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005092:	e7f7      	b.n	8005084 <memmove+0x24>

08005094 <_free_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4605      	mov	r5, r0
 8005098:	2900      	cmp	r1, #0
 800509a:	d045      	beq.n	8005128 <_free_r+0x94>
 800509c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a0:	1f0c      	subs	r4, r1, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bfb8      	it	lt
 80050a6:	18e4      	addlt	r4, r4, r3
 80050a8:	f000 f8d2 	bl	8005250 <__malloc_lock>
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <_free_r+0x98>)
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	4610      	mov	r0, r2
 80050b2:	b933      	cbnz	r3, 80050c2 <_free_r+0x2e>
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	6014      	str	r4, [r2, #0]
 80050b8:	4628      	mov	r0, r5
 80050ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050be:	f000 b8cd 	b.w	800525c <__malloc_unlock>
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	d90b      	bls.n	80050de <_free_r+0x4a>
 80050c6:	6821      	ldr	r1, [r4, #0]
 80050c8:	1862      	adds	r2, r4, r1
 80050ca:	4293      	cmp	r3, r2
 80050cc:	bf04      	itt	eq
 80050ce:	681a      	ldreq	r2, [r3, #0]
 80050d0:	685b      	ldreq	r3, [r3, #4]
 80050d2:	6063      	str	r3, [r4, #4]
 80050d4:	bf04      	itt	eq
 80050d6:	1852      	addeq	r2, r2, r1
 80050d8:	6022      	streq	r2, [r4, #0]
 80050da:	6004      	str	r4, [r0, #0]
 80050dc:	e7ec      	b.n	80050b8 <_free_r+0x24>
 80050de:	461a      	mov	r2, r3
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b10b      	cbz	r3, 80050e8 <_free_r+0x54>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d9fa      	bls.n	80050de <_free_r+0x4a>
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	1850      	adds	r0, r2, r1
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d10b      	bne.n	8005108 <_free_r+0x74>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	4401      	add	r1, r0
 80050f4:	1850      	adds	r0, r2, r1
 80050f6:	4283      	cmp	r3, r0
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	d1dd      	bne.n	80050b8 <_free_r+0x24>
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	6053      	str	r3, [r2, #4]
 8005102:	4401      	add	r1, r0
 8005104:	6011      	str	r1, [r2, #0]
 8005106:	e7d7      	b.n	80050b8 <_free_r+0x24>
 8005108:	d902      	bls.n	8005110 <_free_r+0x7c>
 800510a:	230c      	movs	r3, #12
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	e7d3      	b.n	80050b8 <_free_r+0x24>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	1821      	adds	r1, r4, r0
 8005114:	428b      	cmp	r3, r1
 8005116:	bf04      	itt	eq
 8005118:	6819      	ldreq	r1, [r3, #0]
 800511a:	685b      	ldreq	r3, [r3, #4]
 800511c:	6063      	str	r3, [r4, #4]
 800511e:	bf04      	itt	eq
 8005120:	1809      	addeq	r1, r1, r0
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	6054      	str	r4, [r2, #4]
 8005126:	e7c7      	b.n	80050b8 <_free_r+0x24>
 8005128:	bd38      	pop	{r3, r4, r5, pc}
 800512a:	bf00      	nop
 800512c:	2000009c 	.word	0x2000009c

08005130 <_malloc_r>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	1ccd      	adds	r5, r1, #3
 8005134:	f025 0503 	bic.w	r5, r5, #3
 8005138:	3508      	adds	r5, #8
 800513a:	2d0c      	cmp	r5, #12
 800513c:	bf38      	it	cc
 800513e:	250c      	movcc	r5, #12
 8005140:	2d00      	cmp	r5, #0
 8005142:	4606      	mov	r6, r0
 8005144:	db01      	blt.n	800514a <_malloc_r+0x1a>
 8005146:	42a9      	cmp	r1, r5
 8005148:	d903      	bls.n	8005152 <_malloc_r+0x22>
 800514a:	230c      	movs	r3, #12
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	2000      	movs	r0, #0
 8005150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005152:	f000 f87d 	bl	8005250 <__malloc_lock>
 8005156:	4921      	ldr	r1, [pc, #132]	; (80051dc <_malloc_r+0xac>)
 8005158:	680a      	ldr	r2, [r1, #0]
 800515a:	4614      	mov	r4, r2
 800515c:	b99c      	cbnz	r4, 8005186 <_malloc_r+0x56>
 800515e:	4f20      	ldr	r7, [pc, #128]	; (80051e0 <_malloc_r+0xb0>)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	b923      	cbnz	r3, 800516e <_malloc_r+0x3e>
 8005164:	4621      	mov	r1, r4
 8005166:	4630      	mov	r0, r6
 8005168:	f000 f862 	bl	8005230 <_sbrk_r>
 800516c:	6038      	str	r0, [r7, #0]
 800516e:	4629      	mov	r1, r5
 8005170:	4630      	mov	r0, r6
 8005172:	f000 f85d 	bl	8005230 <_sbrk_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d123      	bne.n	80051c2 <_malloc_r+0x92>
 800517a:	230c      	movs	r3, #12
 800517c:	6033      	str	r3, [r6, #0]
 800517e:	4630      	mov	r0, r6
 8005180:	f000 f86c 	bl	800525c <__malloc_unlock>
 8005184:	e7e3      	b.n	800514e <_malloc_r+0x1e>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	1b5b      	subs	r3, r3, r5
 800518a:	d417      	bmi.n	80051bc <_malloc_r+0x8c>
 800518c:	2b0b      	cmp	r3, #11
 800518e:	d903      	bls.n	8005198 <_malloc_r+0x68>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	441c      	add	r4, r3
 8005194:	6025      	str	r5, [r4, #0]
 8005196:	e004      	b.n	80051a2 <_malloc_r+0x72>
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	42a2      	cmp	r2, r4
 800519c:	bf0c      	ite	eq
 800519e:	600b      	streq	r3, [r1, #0]
 80051a0:	6053      	strne	r3, [r2, #4]
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 f85a 	bl	800525c <__malloc_unlock>
 80051a8:	f104 000b 	add.w	r0, r4, #11
 80051ac:	1d23      	adds	r3, r4, #4
 80051ae:	f020 0007 	bic.w	r0, r0, #7
 80051b2:	1ac2      	subs	r2, r0, r3
 80051b4:	d0cc      	beq.n	8005150 <_malloc_r+0x20>
 80051b6:	1a1b      	subs	r3, r3, r0
 80051b8:	50a3      	str	r3, [r4, r2]
 80051ba:	e7c9      	b.n	8005150 <_malloc_r+0x20>
 80051bc:	4622      	mov	r2, r4
 80051be:	6864      	ldr	r4, [r4, #4]
 80051c0:	e7cc      	b.n	800515c <_malloc_r+0x2c>
 80051c2:	1cc4      	adds	r4, r0, #3
 80051c4:	f024 0403 	bic.w	r4, r4, #3
 80051c8:	42a0      	cmp	r0, r4
 80051ca:	d0e3      	beq.n	8005194 <_malloc_r+0x64>
 80051cc:	1a21      	subs	r1, r4, r0
 80051ce:	4630      	mov	r0, r6
 80051d0:	f000 f82e 	bl	8005230 <_sbrk_r>
 80051d4:	3001      	adds	r0, #1
 80051d6:	d1dd      	bne.n	8005194 <_malloc_r+0x64>
 80051d8:	e7cf      	b.n	800517a <_malloc_r+0x4a>
 80051da:	bf00      	nop
 80051dc:	2000009c 	.word	0x2000009c
 80051e0:	200000a0 	.word	0x200000a0

080051e4 <_realloc_r>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	4607      	mov	r7, r0
 80051e8:	4614      	mov	r4, r2
 80051ea:	460e      	mov	r6, r1
 80051ec:	b921      	cbnz	r1, 80051f8 <_realloc_r+0x14>
 80051ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051f2:	4611      	mov	r1, r2
 80051f4:	f7ff bf9c 	b.w	8005130 <_malloc_r>
 80051f8:	b922      	cbnz	r2, 8005204 <_realloc_r+0x20>
 80051fa:	f7ff ff4b 	bl	8005094 <_free_r>
 80051fe:	4625      	mov	r5, r4
 8005200:	4628      	mov	r0, r5
 8005202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005204:	f000 f830 	bl	8005268 <_malloc_usable_size_r>
 8005208:	42a0      	cmp	r0, r4
 800520a:	d20f      	bcs.n	800522c <_realloc_r+0x48>
 800520c:	4621      	mov	r1, r4
 800520e:	4638      	mov	r0, r7
 8005210:	f7ff ff8e 	bl	8005130 <_malloc_r>
 8005214:	4605      	mov	r5, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	d0f2      	beq.n	8005200 <_realloc_r+0x1c>
 800521a:	4631      	mov	r1, r6
 800521c:	4622      	mov	r2, r4
 800521e:	f7ff ff11 	bl	8005044 <memcpy>
 8005222:	4631      	mov	r1, r6
 8005224:	4638      	mov	r0, r7
 8005226:	f7ff ff35 	bl	8005094 <_free_r>
 800522a:	e7e9      	b.n	8005200 <_realloc_r+0x1c>
 800522c:	4635      	mov	r5, r6
 800522e:	e7e7      	b.n	8005200 <_realloc_r+0x1c>

08005230 <_sbrk_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d06      	ldr	r5, [pc, #24]	; (800524c <_sbrk_r+0x1c>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb fd28 	bl	8000c90 <_sbrk>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_sbrk_r+0x1a>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_sbrk_r+0x1a>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000300 	.word	0x20000300

08005250 <__malloc_lock>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__malloc_lock+0x8>)
 8005252:	f000 b811 	b.w	8005278 <__retarget_lock_acquire_recursive>
 8005256:	bf00      	nop
 8005258:	20000308 	.word	0x20000308

0800525c <__malloc_unlock>:
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__malloc_unlock+0x8>)
 800525e:	f000 b80c 	b.w	800527a <__retarget_lock_release_recursive>
 8005262:	bf00      	nop
 8005264:	20000308 	.word	0x20000308

08005268 <_malloc_usable_size_r>:
 8005268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526c:	1f18      	subs	r0, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfbc      	itt	lt
 8005272:	580b      	ldrlt	r3, [r1, r0]
 8005274:	18c0      	addlt	r0, r0, r3
 8005276:	4770      	bx	lr

08005278 <__retarget_lock_acquire_recursive>:
 8005278:	4770      	bx	lr

0800527a <__retarget_lock_release_recursive>:
 800527a:	4770      	bx	lr

0800527c <_init>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr

08005288 <_fini>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr
